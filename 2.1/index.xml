<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MongoDB Scala Driver</title>
    <link>/mongo-scala-driver/2.1/</link>
    <description>Recent content on MongoDB Scala Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Nov 2016 14:14:00 +0000</lastBuildDate>
    <atom:link href="/mongo-scala-driver/2.1/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Macros</title>
      <link>/mongo-scala-driver/2.1/bson/macros/</link>
      <pubDate>Sun, 20 Nov 2016 14:14:00 +0000</pubDate>
      
      <guid>/mongo-scala-driver/2.1/bson/macros/</guid>
      <description>

&lt;h2 id=&#34;macros&#34;&gt;Macros&lt;/h2&gt;

&lt;p&gt;New in 2.0, the Scala driver allows you to use case classes to represent documents in a collection via the
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.bson.codecs.Macros
&#34;&gt;&lt;code&gt;Macros&lt;/code&gt;&lt;/a&gt; helper.  Simple case classes and nested case classes are supported.
Hierarchical modelling can be achieve by using a sealed trait and having case classes implement the parent trait.&lt;/p&gt;

&lt;p&gt;Many simple Scala types are supported and they will be marshaled into their corresponding
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.bson.BsonValue
&#34;&gt;&lt;code&gt;BsonValue&lt;/code&gt;&lt;/a&gt; type. Below is a list of Scala types and their type-safe BSON representation:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scala type&lt;/th&gt;
&lt;th&gt;BSON type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;case class&lt;/td&gt;
&lt;td&gt;Document&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Double&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Int32&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Int64&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Array[Byte]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Binary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;creating-codecs&#34;&gt;Creating Codecs&lt;/h2&gt;

&lt;p&gt;To create a codec for your case class use the &lt;code&gt;Macros&lt;/code&gt; object helper methods. Unless there is a good reason you should use the
&lt;code&gt;Macros.createCodecProvider&lt;/code&gt; method to create a &lt;a href=&#34;http://api.mongodb.org/java/3.4/?org/bson/codecs/configuration/CodecProvider.html
&#34;&gt;&lt;code&gt;CodecProvider&lt;/code&gt;&lt;/a&gt;.
A &lt;code&gt;CodecProvider&lt;/code&gt; will pass the configured &lt;a href=&#34;http://api.mongodb.org/java/3.4/?org/bson/codecs/configuration/CodecRegistry.html
&#34;&gt;&lt;code&gt;CodecRegistry&lt;/code&gt;&lt;/a&gt; to the
underlying &lt;a href=&#34;http://api.mongodb.org/java/3.4/?org/bson/codecs/configuration/Codec.html
&#34;&gt;&lt;code&gt;Codec&lt;/code&gt;&lt;/a&gt; and provide access to all the configured codecs.&lt;/p&gt;

&lt;p&gt;To create a &lt;code&gt;CodecProvider&lt;/code&gt; all you need to do is to set the case class type when calling &lt;code&gt;createCodecProvider&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.bson.codecs.Macros

case class Person(firstName: String, secondName: String)

val personCodecProvider = Macros.createCodecProvider[Person]()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;personCodecProvider&lt;/code&gt; can then be used when converted into a &lt;code&gt;CodecRegistry&lt;/code&gt; by using the &lt;a href=&#34;http://api.mongodb.org/java/3.4/?org/bson/codecs/configuration/CodecRegistries.html
&#34;&gt;&lt;code&gt;CodecRegistries&lt;/code&gt;&lt;/a&gt; static helpers. Below we create a new codec registry combining the new &lt;code&gt;personCodecProvider&lt;/code&gt; and the the default codec registry:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.bson.codecs.DEFAULT_CODEC_REGISTRY
import org.bson.codecs.configuration.CodecRegistries.{fromRegistries, fromProviders}

val codecRegistry = fromRegistries( fromProviders(personCodecProvider), DEFAULT_CODEC_REGISTRY )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Macros&lt;/code&gt; helper also has an implicit &lt;code&gt;createCodecProvider&lt;/code&gt; method that takes the &lt;code&gt;Class[T]&lt;/code&gt; and will create a &lt;code&gt;CodecProvider&lt;/code&gt; from that.
As you can see in the example below it&amp;rsquo;s much more concise especially when defining multiple providers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.bson.codecs.Macros._
import org.mongodb.scala.bson.codecs.DEFAULT_CODEC_REGISTRY
import org.bson.codecs.configuration.CodecRegistries.{fromRegistries, fromProviders}

case class Address(firstLine: String, secondLine: String, thirdLine: String, town: String, zipCode: String)
case class ClubMember(person: Person, address: Address, paid: Boolean)

val codecRegistry = fromRegistries( fromProviders(classOf[ClubMember], classOf[Person], classOf[Address]), DEFAULT_CODEC_REGISTRY )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sealed-classes-and-adts&#34;&gt;Sealed classes and ADTs&lt;/h2&gt;

&lt;p&gt;Hierarchical class structures are supported via sealed classes. Each subclass is handled specifically by the generated codec, so you only
need create a &lt;code&gt;CodecProvider&lt;/code&gt; for the parent sealed class. Internally an extra field (&lt;code&gt;_t&lt;/code&gt;) is stored alongside the data so that
the correct subclass can be hydrated when decoding the data.  Below is an example of a tree like structure containing branch and leaf nodes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;sealed class Tree
case class Branch(b1: Tree, b2: Tree, value: Int) extends Tree
case class Leaf(value: Int) extends Tree

val codecRegistry = fromRegistries( fromProviders(classOf[Tree]), DEFAULT_CODEC_REGISTRY )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;options-and-none-values&#34;&gt;Options and None values.&lt;/h2&gt;

&lt;p&gt;By default &lt;code&gt;Option&lt;/code&gt; values are always stored. In 2.1.0 a new macro helpers were added so that &lt;code&gt;None&lt;/code&gt; values would not be stored in the
database. In the following example only if an address is present will it be stored in the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.bson.codecs.Macros

case class Person(firstName: String, secondName: String, address: Option[Address])

val personCodecProvider = Macros.createCodecProviderIgnoreNone[Person]()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GridFS</title>
      <link>/mongo-scala-driver/2.1/reference/gridfs/</link>
      <pubDate>Fri, 27 Nov 2015 12:00:00 +0000</pubDate>
      
      <guid>/mongo-scala-driver/2.1/reference/gridfs/</guid>
      <description>

&lt;h2 id=&#34;gridfs&#34;&gt;GridFS&lt;/h2&gt;

&lt;p&gt;GridFS is a specification for storing and retrieving files that exceed the BSON-document size limit of 16MB.&lt;/p&gt;

&lt;p&gt;Instead of storing a file in a single document, GridFS divides a file into parts, or chunks, and stores each of those chunks as a separate document.
By default GridFS limits chunk size to 255kb. GridFS uses two collections to store files. The chunks collection stores the file chunks, and
the files collection stores the file metadata.&lt;/p&gt;

&lt;p&gt;When you query a GridFS store for a file, the driver or client will reassemble the chunks as needed. GridFS is useful not only for storing
files that exceed 16MB but also for storing any files for which you want access without having to load the entire file into memory.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;For more information about GridFS see the &lt;a href=&#34;http://docs.mongodb.org/manual/core/gridfs/&#34;&gt;MongoDB GridFS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The following code snippets come from the &lt;code&gt;GridFSTour.java&lt;/code&gt; example code
that can be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-scala-driver/blob/master/examples/src/test/scala/tour/GridFSTour.scala
&#34;&gt;driver source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;This guide uses the &lt;code&gt;Helper&lt;/code&gt; implicits as covered in the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/getting-started/quick-tour-primer/&#34;&gt;Quick Tour Primer&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;async-streams&#34;&gt;Async Streams&lt;/h2&gt;

&lt;p&gt;As there are multiple API&amp;rsquo;s for Asynchronous I/O on the JVM the GridFS library uses a flexible interfaces for asynchronous input and output.
The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org/mongodbs/cala/gridfs/AsyncInputStream
&#34;&gt;&lt;code&gt;AsyncInputStream&lt;/code&gt;&lt;/a&gt; interface represents an &lt;code&gt;InputStream&lt;/code&gt;
and the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.AsyncOutputStream
&#34;&gt;&lt;code&gt;AsyncOutputStream&lt;/code&gt;&lt;/a&gt; interface represents an &lt;code&gt;OutputStream&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition to these interfaces there are the following helpers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.helpers/AsyncStreamHelper
&#34;&gt;&lt;code&gt;AsyncStreamHelper&lt;/code&gt;&lt;/a&gt; which provides support for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;byte[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InputStream&lt;/code&gt; - note: input streams are blocking&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutputStream&lt;/code&gt; - note: output streams are blocking&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.helpers/AsynchronousChannelHelper
&#34;&gt;&lt;code&gt;AsynchronousChannelHelper&lt;/code&gt;&lt;/a&gt; which provides support for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AsynchronousByteChannel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsynchronousFileChannel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These interfaces should be easy to wrap for any alternative asynchronous I/O implementations such as Akka, Netty or Vertx.&lt;/p&gt;

&lt;h2 id=&#34;connecting-to-gridfs&#34;&gt;Connecting to GridFS&lt;/h2&gt;

&lt;p&gt;Interactions with GridFS are done via the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket
&#34;&gt;&lt;code&gt;GridFSBucket&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;Creating a &lt;code&gt;GridFSBucket&lt;/code&gt; requires an instance of a
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org/mongodb/scala/MongoDatabase
&#34;&gt;&lt;code&gt;MongoDatabase&lt;/code&gt;&lt;/a&gt; and you can optionally provide a custom bucket name.&lt;/p&gt;

&lt;p&gt;The following example shows how to create a &lt;code&gt;GridFSBucket&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Create a gridFSBucket using the default bucket name &amp;quot;fs&amp;quot;
val gridFSBucket: GridFSBucket = GridFSBucket(myDatabase)

// Create a gridFSBucket with a custom bucket name &amp;quot;files&amp;quot;
val customGridFSBucket: GridFSBucket = GridFSBuckets(myDatabase, &amp;quot;files&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;uploading-to-gridfs&#34;&gt;Uploading to GridFS&lt;/h2&gt;

&lt;p&gt;There are two main ways to upload data into GridFS.&lt;/p&gt;

&lt;h3 id=&#34;uploadfromstream&#34;&gt;UploadFromStream&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket@uploadFromStream(filename:String,source:org.mongodb.scala.gridfs.AsyncInputStream,options:org.mongodb.scala.gridfs.GridFSUploadOptions):org.mongodb.scala.Observable[org.bson.types.ObjectId]
&#34;&gt;&lt;code&gt;uploadFromStream&lt;/code&gt;&lt;/a&gt; method
reads the contents of an &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.AsyncInputStream
&#34;&gt;&lt;code&gt;AsyncInputStream&lt;/code&gt;&lt;/a&gt; and saves it to the &lt;code&gt;GridFSBucket&lt;/code&gt;.
The size of the chunks defaults to 255 kb, but can be configured via the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSUploadOptions
&#34;&gt;&lt;code&gt;GridFSUploadOptions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following example uploads an &lt;code&gt;AsyncInputStream&lt;/code&gt; into &lt;code&gt;GridFSBucket&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Get the input stream
val inputPath: Path = Paths.get(&amp;quot;/tmp/mongodb-tutorial.pdf&amp;quot;)
val streamToDownloadTo: AsynchronousFileChannel = AsynchronousFileChannel.open(outputPath, StandardOpenOptionRead)
val streamToUploadFrom: AsyncInputStream = channelToInputStream(streamToDownloadTo) // Using the AsynchronousChannelHelper

// Create some custom options
val options: GridFSUploadOptions = new GridFSUploadOptions().chunkSizeBytes(1024 * 1204).metadata(Document(&amp;quot;type&amp;quot; -&amp;gt; &amp;quot;presentation&amp;quot;))

val fileId: ObjectId = gridFSBucket.uploadFromStream(&amp;quot;mongodb-tutorial&amp;quot;, streamToUploadFrom, options).headResult()
streamToUploadFrom.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;openuploadstream&#34;&gt;OpenUploadStream&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket@openUploadStream(filename:String):org.mongodb.scala.gridfs.GridFSUploadStream
&#34;&gt;&lt;code&gt;openUploadStream&lt;/code&gt;&lt;/a&gt; method returns a &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSUploadStream
&#34;&gt;&lt;code&gt;GridFSUploadStream&lt;/code&gt;&lt;/a&gt; which extends &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.AsyncOutputStream
&#34;&gt;&lt;code&gt;AsyncOutputStream&lt;/code&gt;&lt;/a&gt; and can be written to.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;GridFSUploadStream&lt;/code&gt; buffers data until it reaches the &lt;code&gt;chunkSizeBytes&lt;/code&gt; and then inserts the chunk into the chunks collection.
When the &lt;code&gt;GridFSUploadStream&lt;/code&gt; is closed, the final chunk is written and the file metadata is inserted into the files collection.&lt;/p&gt;

&lt;p&gt;The following example uploads an into &lt;code&gt;GridFSBucket&lt;/code&gt; via the returned &lt;code&gt;OutputStream&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val data = ByteBuffer.wrap(&amp;quot;Data to upload into GridFS&amp;quot;.getBytes(StandardCharsets.UTF_8))
val uploadStream: GridFSUploadStream = gridFSBucket.openUploadStream(&amp;quot;sampleData&amp;quot;)
uploadStream.write(data).headResult()
uploadStream.close().headResult()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;GridFS will automatically create indexes on the files and chunks collections on first upload of data into the GridFS bucket.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;finding-files-stored-in-gridfs&#34;&gt;Finding files stored in GridFS&lt;/h2&gt;

&lt;p&gt;To find the files stored in the &lt;code&gt;GridFSBucket&lt;/code&gt; use the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket@find():org.mongodb.scala.gridfs.GridFSFindObservable
&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example prints out the filename of each file stored:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;gridFSBucket.find().results().foreach(file =&amp;gt; println(s&amp;quot; - ${file.getFilename}&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also provide a custom filter to limit the results returned. The following example prints out the filenames of all files with a
&amp;ldquo;image/png&amp;rdquo; value set as the contentType in the user defined metadata document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;gridFSBucket.find(Filters.equal(&amp;quot;metadata.contentType&amp;quot;, &amp;quot;image/png&amp;quot;)).results().foreach(file =&amp;gt; println(s&amp;quot; &amp;gt; ${file.getFilename}&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;downloading-from-gridfs&#34;&gt;Downloading from GridFS&lt;/h2&gt;

&lt;p&gt;There are four main ways to download data from GridFS.&lt;/p&gt;

&lt;h3 id=&#34;downloadfromstream&#34;&gt;DownloadFromStream&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket@downloadToStream(id:org.bson.types.ObjectId,destination:org.mongodb.scala.gridfs.AsyncOutputStream):org.mongodb.scala.Observable[Long]
&#34;&gt;&lt;code&gt;downloadToStream&lt;/code&gt;&lt;/a&gt;
method reads the contents from MongoDB and writes the data directly to the provided &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.AsyncOutputStream
&#34;&gt;&lt;code&gt;AsyncOutputStream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following example downloads a file into the provided &lt;code&gt;OutputStream&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val outputPath: Path = Paths.get(&amp;quot;/tmp/mongodb-tutorial.txt&amp;quot;)
var streamToDownloadTo: AsynchronousFileChannel = AsynchronousFileChannel.open(outputPath, StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE, StandardOpenOption.DELETE_ON_CLOSE)
gridFSBucket.downloadToStream(fileId, channelToOutputStream(streamToDownloadTo)).headResult()
streamToDownloadTo.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;downloadtostreambyname&#34;&gt;DownloadToStreamByName&lt;/h3&gt;

&lt;p&gt;If you don&amp;rsquo;t know the &lt;code&gt;ObjectId&lt;/code&gt; of the file you want to download, then you use the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket@downloadToStream(filename:String,destination:org.mongodb.scala.gridfs.AsyncOutputStream,options:org.mongodb.scala.gridfs.GridFSDownloadOptions):org.mongodb.scala.Observable[Long]
&#34;&gt;&lt;code&gt;downloadToStreamByName&lt;/code&gt;&lt;/a&gt; method.
By default it will download the latest version of the file. Use the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSDownloadByNameOptions
&#34;&gt;&lt;code&gt;GridFSDownloadByNameOptions&lt;/code&gt;&lt;/a&gt; to configure which version to download.&lt;/p&gt;

&lt;p&gt;The following example downloads the original version of the file named &amp;ldquo;mongodb-tutorial&amp;rdquo; into the &lt;code&gt;OutputStream&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;streamToDownloadTo = AsynchronousFileChannel.open(outputPath, StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE, StandardOpenOption.DELETE_ON_CLOSE)
val downloadOptions: GridFSDownloadOptions = new GridFSDownloadOptions().revision(0)
gridFSBucket.downloadToStream(&amp;quot;mongodb-tutorial&amp;quot;, channelToOutputStream(streamToDownloadTo), downloadOptions).headResult()
streamToDownloadTo.close().headResult()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;opendownloadstream&#34;&gt;OpenDownloadStream&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket@openDownloadStream(filename:String):org.mongodb.scala.gridfs.GridFSDownloadStream
&#34;&gt;&lt;code&gt;openDownloadStream&lt;/code&gt;&lt;/a&gt;
method returns a &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSDownloadStream
&#34;&gt;&lt;code&gt;GridFSDownloadStream&lt;/code&gt;&lt;/a&gt; which extends
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.AsyncInputStream
&#34;&gt;&lt;code&gt;AsyncInputStream&lt;/code&gt;&lt;/a&gt; and can be read from.&lt;/p&gt;

&lt;p&gt;The following example reads from the &lt;code&gt;GridFSBucket&lt;/code&gt; via the returned &lt;code&gt;AsyncInputStream&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val dstByteBuffer: ByteBuffer = ByteBuffer.allocate(1024 * 1024)
val downloadStream: GridFSDownloadStream = gridFSBucket.openDownloadStream(fileId)
downloadStream.read(dstByteBuffer).map(result =&amp;gt; {
  dstByteBuffer.flip
  val bytes: Array[Byte] = new Array[Byte](result)
  dstByteBuffer.get(bytes)
  println(new String(bytes, StandardCharsets.UTF_8))
}).headResult()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;opendownloadstream-by-name&#34;&gt;OpenDownloadStream by name&lt;/h3&gt;

&lt;p&gt;You can also open a &lt;code&gt;GridFSDownloadStream&lt;/code&gt; by searching against the filename, using the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket@openDownloadStream(filename:String):org.mongodb.scala.gridfs.GridFSDownloadStream
&#34;&gt;&lt;code&gt;openDownloadStream&lt;/code&gt;&lt;/a&gt; method. By default it will download the latest version of the file. Use the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSDownloadByNameOptions
&#34;&gt;&lt;code&gt;GridFSDownloadByNameOptions&lt;/code&gt;&lt;/a&gt; to configure which version to download.&lt;/p&gt;

&lt;p&gt;The following example downloads the latest version of the file named &amp;ldquo;sampleData&amp;rdquo; into the &lt;code&gt;dstByteBuffer&lt;/code&gt; ByteBuffer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val downloadStreamByName: GridFSDownloadStream = gridFSBucket.openDownloadStream(&amp;quot;sampleData&amp;quot;)
downloadStreamByName.read(dstByteBuffer).map(result =&amp;gt; {
  dstByteBuffer.flip
  val bytes: Array[Byte] = new Array[Byte](result)
  dstByteBuffer.get(bytes)
  println(new String(bytes, StandardCharsets.UTF_8))
}).headResult()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;renaming-files&#34;&gt;Renaming files&lt;/h2&gt;

&lt;p&gt;If you should need to rename a file, then the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket.html#rename-org.bson.types.ObjectId-java.lang.String-
&#34;&gt;&lt;code&gt;rename&lt;/code&gt;&lt;/a&gt; method can be used.&lt;/p&gt;

&lt;p&gt;The following example renames a file to &amp;ldquo;mongodbTutorial&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;gridFSBucket.rename(fileId, &amp;quot;mongodbTutorial&amp;quot;).results()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;rename&lt;/code&gt; method requires an &lt;code&gt;ObjectId&lt;/code&gt; rather than a &lt;code&gt;filename&lt;/code&gt; to ensure the correct file is renamed.&lt;/p&gt;

&lt;p&gt;To rename multiple revisions of the same filename, first retrieve the full list of files. Then for every file that should be renamed then execute &lt;code&gt;rename&lt;/code&gt; with the corresponding &lt;code&gt;_id&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;deleting-files&#34;&gt;Deleting files&lt;/h2&gt;

&lt;p&gt;To delete a file from the &lt;code&gt;GridFSBucket&lt;/code&gt; use the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.gridfs.GridFSBucket@delete(id:org.mongodb.scala.bson.BsonValue):org.mongodb.scala.Observable[org.mongodb.scala.Completed]
&#34;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example deletes a file from the &lt;code&gt;GridFSBucket&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;gridFSBucket.delete(fileId).results()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>/mongo-scala-driver/2.1/changelog/</link>
      <pubDate>Wed, 18 Nov 2015 09:56:14 +0000</pubDate>
      
      <guid>/mongo-scala-driver/2.1/changelog/</guid>
      <description>

&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;

&lt;p&gt;Changes between released versions&lt;/p&gt;

&lt;h3 id=&#34;2-1-0&#34;&gt;2.1.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Added support for type aliases in the CaseClassCodec. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-305&#34;&gt;SCALA-305&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added the ability to ignore &lt;code&gt;None&lt;/code&gt; values when encoding &lt;code&gt;Option&lt;/code&gt; fields. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-300&#34;&gt;SCALA-300&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added the ability to handle missing values for &lt;code&gt;Option&lt;/code&gt; fields. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-299&#34;&gt;SCALA-299&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved the CaseClassCodec handling of &lt;code&gt;null&lt;/code&gt; values. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-301&#34;&gt;SCALA-301&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-0-0&#34;&gt;2.0.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Added Case class support. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-168&#34;&gt;SCALA-168&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;observeOn(context: ExecutionContext)&lt;/code&gt; so alternative execution contexts can be used with &lt;code&gt;Observables&lt;/code&gt;. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-242&#34;&gt;SCALA-242&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved error message when actioning unsubscribed to Observables. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-248&#34;&gt;SCALA-248&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed FoldLeftObservable, ensuring that only one request for data is actioned and that all the data is requested. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-289&#34;&gt;SCALA-289&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added SingleObservable trait and implicits for easy conversion and identification of Observables that return a single result. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-234&#34;&gt;SCALA-234&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MongoCollection methods now default to the collection type rather than Document. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-250&#34;&gt;SCALA-250&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-2-1&#34;&gt;1.2.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Removed erroneous scala-reflect dependency. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-288&#34;&gt;SCALA-288&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-2-0&#34;&gt;1.2.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Added support for maxStaleness for secondary reads. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-251&#34;&gt;SCALA-251&lt;/a&gt; &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-280&#34;&gt;SCALA-280&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added support for MONGODB-X509 auth without username. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-279&#34;&gt;SCALA-279&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added support for library authors to extend the handshake metadata. &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-252&#34;&gt;SCALA-252&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added support for the new Aggregation stages in 3.4 &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-258&#34;&gt;SCALA-258&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added support for views &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-255&#34;&gt;SCALA-255&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added Collation support &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-249&#34;&gt;SCALA-249&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added support for BsonDecimal128 &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-241&#34;&gt;SCALA-241&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added support for ReadConcern.LINEARIZABLE &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-247&#34;&gt;SCALA-247&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed bug where some connection string options were not applied &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-253&#34;&gt;SCALA-253&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added GridFS Support &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-154&#34;&gt;SCALA-154&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-1-1&#34;&gt;1.1.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Updated Mongodb Driver Async dependency to &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-237&#34;&gt;3.2.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ensure Observables can be subscribed to multiple times &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-239&#34;&gt;SCALA-239&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-1&#34;&gt;1.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Updated to support MongoDB 3.2.

&lt;ul&gt;
&lt;li&gt;Added support for &lt;a href=&#34;https://docs.mongodb.org/manual/release-notes/3.2/#document-validation&#34;&gt;Document Validation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added support for &lt;a href=&#34;https://docs.mongodb.org/manual/release-notes/3.2/#readconcern&#34;&gt;ReadConcern&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added support for &lt;a href=&#34;https://docs.mongodb.org/manual/release-notes/3.2/#partial-indexes&#34;&gt;partialIndexes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added new helpers for &lt;a href=&#34;https://docs.mongodb.org/manual/release-notes/3.2/#aggregation-framework-enhancements&#34;&gt;Aggregation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added new helpers for &lt;a href=&#34;https://docs.mongodb.org/manual/release-notes/3.2/#bit-test-query-operators&#34;&gt;bitwise filters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added support for version 3 &lt;a href=&#34;https://docs.mongodb.org/manual/release-notes/3.2/#text-search-enhancements&#34;&gt;text indexes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Updated Mongodb Driver Async dependency to &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA-222&#34;&gt;3.2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://jira.mongodb.org/issues/?jql=fixVersion%20%3D%201.1%20AND%20project%20%3D%20SCALA&#34;&gt;Full issue list&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-0-1&#34;&gt;1.0.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed missing scala codec registry issue when using custom MongoSettings&lt;/li&gt;
&lt;li&gt;Removed unnecessary scala dependency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://jira.mongodb.org/issues/?jql=fixVersion%20%3D%201.0.1%20AND%20project%20%3D%20SCALA&#34;&gt;Full issue list&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-0&#34;&gt;1.0&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Initial release&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Upgrading</title>
      <link>/mongo-scala-driver/2.1/upgrade/</link>
      <pubDate>Wed, 18 Nov 2015 09:56:14 +0000</pubDate>
      
      <guid>/mongo-scala-driver/2.1/upgrade/</guid>
      <description>

&lt;h2 id=&#34;upgrade&#34;&gt;Upgrade&lt;/h2&gt;

&lt;h3 id=&#34;2-0-0&#34;&gt;2.0.0&lt;/h3&gt;

&lt;h4 id=&#34;mongocollection-mehtod-default-to-collection-type-fix&#34;&gt;MongoCollection mehtod default to collection type fix.&lt;/h4&gt;

&lt;p&gt;Previously, in the 1.x series &lt;code&gt;MongoCollection[T].find()&lt;/code&gt; by default would return a &lt;code&gt;FindObservable[Document]&lt;/code&gt; and not &lt;code&gt;FindObservable[T]&lt;/code&gt;.
While this was easy to work around by explicitly setting the type eg: &lt;code&gt;MongoCollection[T].find[T]()&lt;/code&gt; we&amp;rsquo;ve bumped the version to 2.0.0 so
that we can fix the API issue.&lt;/p&gt;

&lt;p&gt;If you took advantage of the default type being &lt;code&gt;Document&lt;/code&gt; you will need to update your code: &lt;code&gt;MongoCollection[T].find[Document]()&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;singleobservable&#34;&gt;SingleObservable&lt;/h4&gt;

&lt;p&gt;The addition of the &lt;code&gt;SingleObservable&lt;/code&gt; trait allows for easy identification of &lt;code&gt;Observables&lt;/code&gt; that return only a single element.
For a SingleObservables &lt;code&gt;toFuture()&lt;/code&gt; will return a &lt;code&gt;Future[T]&lt;/code&gt; instead of &lt;code&gt;Future[Seq[T]]&lt;/code&gt;, any code relying on this will need to be
updated to reflect the new result type.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integrations</title>
      <link>/mongo-scala-driver/2.1/integrations/</link>
      <pubDate>Sun, 19 Jul 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/integrations/</guid>
      <description>

&lt;h1 id=&#34;integrations&#34;&gt;Integrations&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;Observable&lt;/code&gt;, &lt;code&gt;Observer&lt;/code&gt; and &lt;code&gt;Subscription&lt;/code&gt; implementation draws inspiration from the &lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX&lt;/a&gt; and &lt;a href=&#34;http://www.reactive-streams.org&#34;&gt;reactive streams&lt;/a&gt; libraries and provides easy interoperability with them.  For more information about these classes please see the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/getting-started/quick-tour-primer/&#34;&gt;quick tour primer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;rxscala&#34;&gt;RxScala&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/img/mongoRxLogo.png&#34; title=&#34;RxScala&#34; class=&#34;align-left&#34;/&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX&lt;/a&gt; scala driver (RxScala) provides extra composability of &lt;code&gt;Observables&lt;/code&gt; compared to the MongoDB &lt;code&gt;Observable&lt;/code&gt; implementation.&lt;/p&gt;

&lt;p&gt;An example implicit based implementation can be found in the &lt;a href=&#34;https://github.com/mongodb/mongo-scala-driver/blob/master/examples/src/test/scala/rxScala
&#34;&gt;examples folder&lt;/a&gt;.  This includes an implicit based conversion from &lt;code&gt;Observable&lt;/code&gt; to &lt;code&gt;rx.Observable&lt;/code&gt; and an example of it being used.&lt;/p&gt;

&lt;p&gt;The example uses the &lt;a href=&#34;http://reactivex.io/rxscala/scaladoc/index.html#rx.lang.scala.Observable$@apply[T](f:rx.lang.scala.Subscriber[T]=&amp;gt;Unit):rx.lang.scala.Observable[T]&#34;&gt;&lt;code&gt;Observable.apply(f: (Subscriber[T]) =&amp;gt; Unit)&lt;/code&gt;&lt;/a&gt; method to return a cold observable.  It also implements the &lt;a href=&#34;http://reactivex.io/rxscala/scaladoc/index.html#rx.lang.scala.Producer&#34;&gt;&lt;code&gt;Producer&lt;/code&gt;&lt;/a&gt; trait, so the &lt;code&gt;Observable&lt;/code&gt; can honor &amp;ldquo;Backpressure&amp;rdquo; when when using any of the &lt;a href=&#34;http://reactivex.io/documentation/operators/backpressure.html&#34;&gt;backpressure operators&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;reactive-streams&#34;&gt;Reactive Streams&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/img/mongoReactiveLogo.png&#34; title=&#34;RxScala&#34; class=&#34;align-right&#34;/&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.reactive-streams.org&#34;&gt;Reactive streams&lt;/a&gt; initiative provides interfaces that allow reactive stream based systems to interact. The API is similar to the MongoDB &lt;code&gt;Observable&lt;/code&gt; API but without the composability of the MongoDB implementation.&lt;/p&gt;

&lt;p&gt;Converting from an &lt;code&gt;Observable&lt;/code&gt; to a &lt;code&gt;Publisher&lt;/code&gt; is a simple process and can be done in a few short lines of code. An implicit based conversion can be found in the &lt;a href=&#34;https://github.com/mongodb/mongo-scala-driver/blob/master/examples/src/test/scala/rxStreams
&#34;&gt;examples folder&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Indexes</title>
      <link>/mongo-scala-driver/2.1/builders/indexes/</link>
      <pubDate>Thu, 16 Jul 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/builders/indexes/</guid>
      <description>

&lt;h2 id=&#34;indexes&#34;&gt;Indexes&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Indexes$
&#34;&gt;&lt;code&gt;Indexes&lt;/code&gt;&lt;/a&gt; class provides static factory methods for all the MongoDB Index key types.&lt;br /&gt;
Each method returns an instance of the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/bson/documents/#bson&#34;&gt;&lt;code&gt;Bson&lt;/code&gt;&lt;/a&gt; type, which can in turn be used with the &lt;code&gt;createIndex&lt;/code&gt;
methods.&lt;/p&gt;

&lt;p&gt;For brevity, you may choose to import the methods of the &lt;code&gt;Indexes&lt;/code&gt; class statically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.model.Indexes._
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the examples below assume this static import.&lt;/p&gt;

&lt;h3 id=&#34;ascending&#34;&gt;Ascending&lt;/h3&gt;

&lt;p&gt;To specify an ascending index key, use one of the &lt;code&gt;ascending&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;This example specifies an ascending index key for the &lt;code&gt;quantity&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;ascending(&amp;quot;quantity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example specifies a compound index key composed of the &lt;code&gt;quantity&lt;/code&gt; field sorted in ascending order and the &lt;code&gt;totalAmount&lt;/code&gt; field
sorted in ascending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;ascending(&amp;quot;quantity&amp;quot;, &amp;quot;totalAmount&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;descending&#34;&gt;Descending&lt;/h3&gt;

&lt;p&gt;To specify a descending index key, use one of the &lt;code&gt;descending&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;This example specifies a descending index key on the &lt;code&gt;quantity&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;descending(&amp;quot;quantity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example specifies a compound index key composed of the &lt;code&gt;quantity&lt;/code&gt; field sorted in descending order and the &lt;code&gt;totalAmount&lt;/code&gt; field
sorted in descending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;descending(&amp;quot;quantity&amp;quot;, &amp;quot;totalAmount&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compound-indexes&#34;&gt;Compound indexes&lt;/h3&gt;

&lt;p&gt;To specify a compound index, use the &lt;code&gt;compoundIndex&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This example specifies a compound index key composed of the &lt;code&gt;quantity&lt;/code&gt; field sorted in ascending order, followed by the &lt;code&gt;totalAmount&lt;/code&gt; field
sorted in ascending order, followed by the &lt;code&gt;orderDate&lt;/code&gt; field sorted in descending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;compoundIndex(ascending(&amp;quot;quantity&amp;quot;, &amp;quot;totalAmount&amp;quot;), descending(&amp;quot;orderDate&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;text-index&#34;&gt;Text Index&lt;/h3&gt;

&lt;p&gt;To specify a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-text
&#34;&gt;text&lt;/a&gt; index key, use the &lt;code&gt;text&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This example specifies a text index key for the &lt;code&gt;description&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;text(&amp;quot;description&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hashed-index&#34;&gt;Hashed Index&lt;/h3&gt;

&lt;p&gt;To specify a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-hashed
&#34;&gt;hashed&lt;/a&gt; index key, use the &lt;code&gt;hashed&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This example specifies a hashed index key for the &lt;code&gt;timestamp&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;hashed(&amp;quot;timestamp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;geospatial-indexes&#34;&gt;Geospatial Indexes&lt;/h3&gt;

&lt;p&gt;There are also helpers for creating the index keys for the various &lt;a href=&#34;http://docs.mongodb.org/manual/manual/applications/geospatial-indexes
&#34;&gt;geospatial indexes&lt;/a&gt;
supported by mongodb.&lt;/p&gt;

&lt;h4 id=&#34;2dsphere&#34;&gt;2dsphere&lt;/h4&gt;

&lt;p&gt;To specify a &lt;a href=&#34;http://docs.mongodb.org/manual/core/2dsphere/
&#34;&gt;2dsphere&lt;/a&gt; index key, use one of the &lt;code&gt;geo2dsphere&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;This example specifies a 2dsphere index on the &lt;code&gt;location&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;geo2dsphere(&amp;quot;location&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2d&#34;&gt;2d&lt;/h4&gt;

&lt;p&gt;To specify a &lt;a href=&#34;http://docs.mongodb.org/manual/core/2d/
&#34;&gt;2d&lt;/a&gt; index key, use the &lt;code&gt;geo2d&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;A 2d index is for data stored as points on a two-dimensional plane and is intended for legacy coordinate pairs used in MongoDB 2.2 and earlier.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This example specifies a 2d index on the &lt;code&gt;points&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;geo2d(&amp;quot;points&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;geohaystack&#34;&gt;geoHaystack&lt;/h4&gt;

&lt;p&gt;To specify a &lt;a href=&#34;http://docs.mongodb.org/manual/core/geohaystack/
&#34;&gt;geoHaystack&lt;/a&gt; index key, use the &lt;code&gt;geoHaystack&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;For queries that use spherical geometry, a 2dsphere index is a better option than a haystack index. 2dsphere indexes allow field reordering;
geoHaystack indexes require the first field to be the location field. Also, geoHaystack indexes are only usable via commands and so always
return all results at once.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This example specifies a geoHaystack index on the &lt;code&gt;position&lt;/code&gt; field and an ascending index on the &lt;code&gt;type&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;geoHaystack(&amp;quot;position&amp;quot;, ascending(&amp;quot;type&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Observables</title>
      <link>/mongo-scala-driver/2.1/reference/observables/</link>
      <pubDate>Thu, 14 May 2015 08:01:00 +0000</pubDate>
      
      <guid>/mongo-scala-driver/2.1/reference/observables/</guid>
      <description>

&lt;h2 id=&#34;observables&#34;&gt;Observables&lt;/h2&gt;

&lt;p&gt;The MongoDB Scala Driver is an asynchronous and non blocking driver. Using the &lt;code&gt;Observable&lt;/code&gt; model asynchronous events become simple, composable operations, freed from the complexity of nested callbacks.&lt;/p&gt;

&lt;p&gt;For asynchronous operations there are three interfaces &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.Observable
&#34;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.Subscription
&#34;&gt;&lt;code&gt;Subscription&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.Observer
&#34;&gt;&lt;code&gt;Observer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The interfaces are similar to &lt;code&gt;Publisher&lt;/code&gt;, &lt;code&gt;Subscription&lt;/code&gt; and &lt;code&gt;Subscriber&lt;/code&gt; interfaces from the &lt;a href=&#34;http://www.reactive-streams.org/&#34;&gt;reactive streams&lt;/a&gt; JVM implementation.  However, we prefer the name &lt;code&gt;Observerable&lt;/code&gt; to &lt;code&gt;Publisher&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; to &lt;code&gt;Subscriber&lt;/code&gt; for readability purposes.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;observable&#34;&gt;Observable&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.Observable
&#34;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; represents a MongoDB operation which emits its results to the &lt;code&gt;Observer&lt;/code&gt; based on demand requested by the &lt;code&gt;Subscription&lt;/code&gt; to the &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Observables can be thought of as partial functions and like partial functions nothing happens until they are called.
An &lt;code&gt;Observable&lt;/code&gt; can be subscribed to multiple times, with each subscription potentially causing new side effects eg: querying MongoDB or inserting data.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;singleobservable&#34;&gt;SingleObservable&lt;/h3&gt;

&lt;p&gt;Introduced in 2.0.0 the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.SingleObservable
&#34;&gt;&lt;code&gt;SingleObservable&lt;/code&gt;&lt;/a&gt; trait is an &lt;code&gt;Observable&lt;/code&gt; implementation that will only return a single item.
It can be used in the same way as ordinary &lt;code&gt;Observables&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;subscription&#34;&gt;Subscription&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.Subscription
&#34;&gt;&lt;code&gt;Subscription&lt;/code&gt;&lt;/a&gt; represents a one-to-one lifecycle of an &lt;code&gt;Observer&lt;/code&gt; subscribing to an &lt;code&gt;Observable&lt;/code&gt;.  A &lt;code&gt;Subscription&lt;/code&gt; to an &lt;code&gt;Observable&lt;/code&gt; can only be used by a single &lt;code&gt;Observer&lt;/code&gt;.  The purpose of a &lt;code&gt;Subscription&lt;/code&gt; is to control demand and to allow unsubscribing from the &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;observer&#34;&gt;Observer&lt;/h2&gt;

&lt;p&gt;An &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.Observer
&#34;&gt;&lt;code&gt;Observer&lt;/code&gt;&lt;/a&gt; provides the mechanism for receiving push-based notifications from the
&lt;code&gt;Observable&lt;/code&gt;.  Demand for these events is signalled by its &lt;code&gt;Subscription&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On subscription to an &lt;code&gt;Observable[TResult]&lt;/code&gt; the &lt;code&gt;Observer&lt;/code&gt; will be passed the &lt;code&gt;Subscription&lt;/code&gt; via the
&lt;code&gt;onSubscribe(subscription: Subscription)&lt;/code&gt;. Demand for results is signaled via the &lt;code&gt;Subscription&lt;/code&gt; and any results are passed to the
&lt;code&gt;onNext(result: TResult)&lt;/code&gt; method.  If there is an error for any reason the &lt;code&gt;onError(e: Throwable)&lt;/code&gt; will be
called and no more events passed to the &lt;code&gt;Observer&lt;/code&gt;. Alternatively, when the &lt;code&gt;Observer&lt;/code&gt; has consumed all the results from the &lt;code&gt;Observable&lt;/code&gt;
the &lt;code&gt;onComplete()&lt;/code&gt; method will be called.&lt;/p&gt;

&lt;h2 id=&#34;back-pressure&#34;&gt;Back Pressure&lt;/h2&gt;

&lt;p&gt;In the following example, the &lt;code&gt;Subscription&lt;/code&gt; is used to control demand when iterating an &lt;code&gt;Observable&lt;/code&gt;. The default &lt;code&gt;Observer&lt;/code&gt; implementation
automatically requests all the data. Below we override the &lt;code&gt;onSubscribe&lt;/code&gt; method custom so we can manage the demand driven iteration of the
&lt;code&gt;Observable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;collection.find().subscribe(new Observer[Document](){

  var batchSize: Long = 10
  var seen: Long = 0
  var subscription: Option[Subscription] = None
  
  override def onSubscribe(subscription: Subscription): Unit = {
    this.subscription = Some(subscription)
    subscription.request(batchSize)
  }
  
  override def onNext(result: Document): Unit = {
    println(document.toJson())
    seen += 1
    if (seen == batchSize) {
      seen = 0
      subscription.get.request(batchSize)
    }
  }

  override def onError(e: Throwable): Unit = println(s&amp;quot;Error: $e&amp;quot;)

  override def onComplete(): Unit = println(&amp;quot;Completed&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;observable-helpers&#34;&gt;Observable Helpers&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;org.mongodb.scala&lt;/code&gt; package provides improved interaction with the
&lt;a href=&#34;http://api.mongodb.org/java/3.4/?com/mongodb/async/client/Observable.html
&#34;&gt;Java &lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; class via the
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ScalaObservable
&#34;&gt;&lt;code&gt;ScalaObservable&lt;/code&gt;&lt;/a&gt; implicit class. The extended functionality includes simple
subscription via anonymous functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Subscribe with custom onNext:
collection.find().subscribe((doc: Document) =&amp;gt; println(doc.toJson()))

// Subscribe with custom onNext and onError
collection.find().subscribe((doc: Document) =&amp;gt; println(doc.toJson()),
                            (e: Throwable) =&amp;gt; println(s&amp;quot;There was an error: $e&amp;quot;))

// Subscribe with custom onNext, onError and onComplete
collection.find().subscribe((doc: Document) =&amp;gt; println(doc.toJson()),
                            (e: Throwable) =&amp;gt; println(s&amp;quot;There was an error: $e&amp;quot;),
                            () =&amp;gt; println(&amp;quot;Completed!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;ScalaObservable&lt;/code&gt; implicit class also provides the following Monadic operators to make chaining and working with &lt;code&gt;Observable&lt;/code&gt; instances
simpler:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;GenerateHtmlObservable().andThen({
  case Success(html: String) =&amp;gt; renderHtml(html)
  case Failure(t) =&amp;gt; renderHttp500
})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full list of Monadic operators available are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@andThen[U](pf:PartialFunction[scala.util.Try[T],U]):org.mongodb.scala.Observable[T]
&#34;&gt;&lt;code&gt;andThen&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;:
Allows the chaining of Observables.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@collect[S]():org.mongodb.scala.Observable[Seq[T]]
&#34;&gt;&lt;code&gt;collect&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Collects all the results into a sequence.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@fallbackTo[U&amp;gt;:T](that:org.mongodb.scala.Observable[U]):org.mongodb.scala.Observable[U]
&#34;&gt;&lt;code&gt;fallbackTo&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Allows falling back to an alternative &lt;code&gt;Observable&lt;/code&gt; if there is a failure&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@filter(predicate:T=&amp;gt;Boolean):org.mongodb.scala.Observable[T]
&#34;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Filters results of the &lt;code&gt;Observable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@flatMap[S](mapFunction:T=&amp;gt;org.mongodb.scala.Observable[S]):org.mongodb.scala.Observable[S]
&#34;&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Create a new &lt;code&gt;Observable&lt;/code&gt; by applying a function to each result of the &lt;code&gt;Observable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@foldLeft[S](initialValue:S)(accumulator:(S,T)=&amp;gt;S):org.mongodb.scala.Observable[S]
&#34;&gt;&lt;code&gt;foldLeft&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Creates a new Observable that contains the single result of the applied accumulator function.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@foreach[U](doOnEach:T=&amp;gt;U):Unit
&#34;&gt;&lt;code&gt;foreach&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Applies a function applied to each emitted result.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@head():scala.concurrent.Future[T]
&#34;&gt;&lt;code&gt;head&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Returns the head of the &lt;code&gt;Observable&lt;/code&gt; in a &lt;code&gt;Future&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@map[S](mapFunction:T=&amp;gt;S):org.mongodb.scala.Observable[S]
&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Creates a new Observable by applying a function to each emitted result of the Observable.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@observeOn[S](context:ExecutionContext):org.mongodb.scala.Observable[S]
&#34;&gt;&lt;code&gt;observeOn&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Creates a new Observable that uses a specific &lt;code&gt;ExecutionContext&lt;/code&gt; for future operations.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@recover[U&amp;gt;:T](pf:PartialFunction[Throwable,U]):org.mongodb.scala.Observable[U]
&#34;&gt;&lt;code&gt;recover&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Creates a new &lt;code&gt;Observable&lt;/code&gt; that will handle any matching throwable that this &lt;code&gt;Observable&lt;/code&gt; might contain by assigning it a value of
another &lt;code&gt;Observable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@recoverWith[U&amp;gt;:T](pf:PartialFunction[Throwable,org.mongodb.scala.Observable[U]]):org.mongodb.scala.Observable[U]
&#34;&gt;&lt;code&gt;recoverWith&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Creates a new Observable that will handle any matching throwable that this Observable might contain.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@toFuture():scala.concurrent.Future[Seq[T]]
&#34;&gt;&lt;code&gt;toFuture&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Collects the &lt;code&gt;Observable&lt;/code&gt; results and converts to a &lt;code&gt;Future&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@transform[S](mapFunction:T=&amp;gt;S,errorMapFunction:Throwable=&amp;gt;Throwable):org.mongodb.scala.Observable[S]
&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Creates a new &lt;code&gt;Observable&lt;/code&gt; by applying the resultFunction function to each emitted result.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@withFilter(p:T=&amp;gt;Boolean):org.mongodb.scala.Observable[T]
&#34;&gt;&lt;code&gt;withFilter&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Provides for-comprehensions support to Observables.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ObservableImplicits$ScalaObservable@zip[U](that:org.mongodb.scala.Observable[U]):org.mongodb.scala.Observable[(T,U)]
&#34;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; :
Zips the values of this and that &lt;code&gt;Observable&lt;/code&gt;, and creates a new &lt;code&gt;Observable&lt;/code&gt; holding the tuple of their results.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;singleobservable-1&#34;&gt;SingleObservable&lt;/h3&gt;

&lt;p&gt;As we know that a &lt;code&gt;SingleObservable[T]&lt;/code&gt; will only return a single item the &lt;code&gt;toFuture()&lt;/code&gt; method will return a &lt;code&gt;Future[T]&lt;/code&gt; in the same way as the &lt;code&gt;head&lt;/code&gt; method does.
There is also an implicit converter that converts an &lt;code&gt;Observable&lt;/code&gt; to a &lt;code&gt;SingleObservable&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Documents</title>
      <link>/mongo-scala-driver/2.1/bson/documents/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/bson/documents/</guid>
      <description>

&lt;h2 id=&#34;documents&#34;&gt;Documents&lt;/h2&gt;

&lt;p&gt;The scala driver includes two scala specific representations for BSON documents. Following convention from the scala collections library,
there are immutable and mutable implementations of documents. The underlying implementations of the scala Document use the type safe
&lt;a href=&#34;http://api.mongodb.org/java/3.4/?org/bson/BsonDocument.html
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; class. The scala bson classes are available from the &lt;code&gt;org.mongodb.scala.bson&lt;/code&gt;
namespace, which includes type aliases and companion objects.  In general this should suffice but for advanced use cases you may need to
use &lt;code&gt;org.bson&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The scala &lt;code&gt;Document&lt;/code&gt; classes implement &lt;code&gt;TraversableLike[(String, BsonValue)]&lt;/code&gt; and the general API mirrors that of a &lt;code&gt;Map[String, BsonValue]&lt;/code&gt;.
However, unlike &lt;code&gt;Map&lt;/code&gt; implementations of &lt;code&gt;TraversableLike&lt;/code&gt; enables strict type safety as there is no variance in the value type.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.bson.BsonValue
&#34;&gt;&lt;code&gt;BsonValue&lt;/code&gt;&lt;/a&gt; is the type safe representation of a Bson type from the &lt;code&gt;org.bson&lt;/code&gt; library, it represents specific value types. The most commonly used value types are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BSON type&lt;/th&gt;
&lt;th&gt;Scala type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Document&lt;/td&gt;
&lt;td&gt;&lt;code&gt;org.mongodb.scala.bson.Document&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;&lt;code&gt;List&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Date&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; (ms since epoch)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Double&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Int32&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Int64&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Binary&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Array[Byte]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ObjectId&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is actually possible to change or extend these mappings, this will be covered in detail below.&lt;/p&gt;

&lt;p&gt;There are two main &lt;code&gt;Document&lt;/code&gt; classes:&lt;/p&gt;

&lt;h2 id=&#34;immutable-documents&#34;&gt;Immutable Documents&lt;/h2&gt;

&lt;p&gt;Like the Scala collections library the immutable class is the favoured class.  For convenience it is aliased to &lt;code&gt;org.mongodb.scala.Document&lt;/code&gt;
and &lt;code&gt;org.mongodb.scala.bson.Document&lt;/code&gt; as well as being available from &lt;code&gt;org.mongodb.scala.bson.collection.immutable.Document&lt;/code&gt;. Instances of
this type are guaranteed to be immutable for everyone. Such a collection will never change after it is created. Therefore, you can rely on
the fact that accessing the same collection value repeatedly at different points in time will always yield a collection with the same elements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.bson._

val doc1 = Document(&amp;quot;AL&amp;quot; -&amp;gt; BsonString(&amp;quot;Alabama&amp;quot;))
val doc2 = doc1 + (&amp;quot;AK&amp;quot; -&amp;gt; BsonString(&amp;quot;Alaska&amp;quot;))
val doc3 = doc2 ++ Document(&amp;quot;AR&amp;quot; -&amp;gt; BsonString(&amp;quot;Arkansas&amp;quot;), &amp;quot;AZ&amp;quot; -&amp;gt; BsonString(&amp;quot;Arizona&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mutable-documents&#34;&gt;Mutable Documents&lt;/h2&gt;

&lt;p&gt;To get the mutable &lt;code&gt;Document&lt;/code&gt; version, you need to import it explicitly from &lt;code&gt;org.mongodb.scala.collections.mutable.Document&lt;/code&gt;.  The mutable
&lt;code&gt;Document&lt;/code&gt; can be updated or extended in place. This means you can change, add, or remove elements of the &lt;code&gt;Document&lt;/code&gt; as a side effect. Like
scala collections, when dealing with mutable types you need to understand which code changes which collection and when.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.bson._
import org.mongodb.scala.bson.collection.mutable.Document

val doc = Document(&amp;quot;AL&amp;quot; -&amp;gt; BsonString(&amp;quot;Alabama&amp;quot;))
val doc1 = doc + (&amp;quot;AK&amp;quot; -&amp;gt; BsonString(&amp;quot;Alaska&amp;quot;))   // doc not mutated but new doc created
doc1 ++= Document(&amp;quot;AR&amp;quot; -&amp;gt; BsonString(&amp;quot;Arkansas&amp;quot;), 
                  &amp;quot;AZ&amp;quot; -&amp;gt; BsonString(&amp;quot;Arizona&amp;quot;))  // doc1 mutated as ++= changes in place. 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;implicit-conversions&#34;&gt;Implicit conversions&lt;/h2&gt;

&lt;p&gt;For many of the &lt;code&gt;BsonValue&lt;/code&gt; types there are obvious direct mappings from a Scala type. For example, a &lt;code&gt;String&lt;/code&gt; maps to &lt;code&gt;BsonString&lt;/code&gt;, an &lt;code&gt;Int&lt;/code&gt;
maps to &lt;code&gt;BsonInt32&lt;/code&gt; and a &lt;code&gt;Long&lt;/code&gt; maps to a &lt;code&gt;BsonInt64&lt;/code&gt;.  For convenience these types can be used directly with &lt;code&gt;Documents&lt;/code&gt; and they are
converted by the contract traits in the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.bson.BsonMagnets$
&#34;&gt;&lt;code&gt;BsonMagnets&lt;/code&gt;&lt;/a&gt; object. As long as there is
an implicit &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.bson.BsonTransformer
&#34;&gt;&lt;code&gt;BsonTransformer&lt;/code&gt;&lt;/a&gt; in scope for any given type, then that type can be
converted into a &lt;code&gt;BsonValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following &lt;code&gt;BsonTransformers&lt;/code&gt; are in scope by default:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scala type&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;BsonValue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonBoolean&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonString&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Array[Byte]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonBinary&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Regex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonRegex&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDateTime&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonObjectId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonInt32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDouble&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonNull&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;immutable.Document&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mutable.Document&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Option[T]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonValue&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; has a &lt;code&gt;BsonTransformer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Seq[(String, T)]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDocument&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; has a &lt;code&gt;BsonTransformer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Seq[T]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonArray&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; has a &lt;code&gt;BsonTransformer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BsonValue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonValue&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.Document

val doc1 = Document(&amp;quot;AL&amp;quot; -&amp;gt; &amp;quot;Alabama&amp;quot;)
val doc2 = doc1 + (&amp;quot;AK&amp;quot; -&amp;gt; &amp;quot;Alaska&amp;quot;)
val doc3 = doc2 ++ Document(&amp;quot;AR&amp;quot; -&amp;gt; &amp;quot;Arkansas&amp;quot;, &amp;quot;population&amp;quot; -&amp;gt; 2.966)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is achieved by making use of the &lt;em&gt;&amp;ldquo;Magnet Pattern&amp;rdquo;&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The magnet pattern is an alternative approach to method overloading. Rather than defining several identically named methods with different parameter lists you define only one method with only one parameter.
&lt;br&gt;&lt;br&gt;
This parameter is called the magnet. Its type is the magnet type, a dedicated type constructed purely as the target of a number of implicit conversions defined in the magnets companion object, which are called the magnet branches and which model the various “overloads”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://spray.io/blog/2012-12-13-the-magnet-pattern/&#34;&gt;The Magnet Pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the API where we would normally expect a single value or a key value pair or many key value pairs eg: (&lt;code&gt;BsonValue&lt;/code&gt;, &lt;code&gt;(String, BsonValue)&lt;/code&gt;
or &lt;code&gt;Iterable[(String, BsonValue)]&lt;/code&gt;) we require anything that can become those types via &lt;em&gt;&amp;ldquo;&lt;code&gt;CanBeX&lt;/code&gt;&amp;ldquo;&lt;/em&gt; traits that handle the implicit
conversions necessary to conform to the correct types. These traits are &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.bson.BsonMagnets$$CanBeBsonValue
&#34;&gt;&lt;code&gt;CanBeBsonValue&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.bson.BsonMagnets$$CanBeBsonElement
&#34;&gt;&lt;code&gt;CanBeBsonElement&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.bson.BsonMagnets$$CanBeBsonElements
&#34;&gt;&lt;code&gt;CanBeBsonElements&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One such example is adding a key value pair to a Document or a list of values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val doc1 = Document(&amp;quot;AL&amp;quot; -&amp;gt; &amp;quot;Alabama&amp;quot;)
val doc2 = Document(&amp;quot;codes&amp;quot; -&amp;gt; List(&amp;quot;AL&amp;quot;, &amp;quot;AK&amp;quot;, &amp;quot;AR&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bson&#34;&gt;Bson&lt;/h3&gt;

&lt;p&gt;The driver also contains a small but powerful interface called &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.bson.conversions.Bson
&#34;&gt;&lt;code&gt;Bson&lt;/code&gt;&lt;/a&gt;. Any class
that represents a BSON document, whether included in the driver itself or from a third party, can implement this interface and can then
be used any place in the high-level API where a BSON document is required. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;collection.find(Document(&amp;quot;x&amp;quot; -&amp;gt; 1))
collection.find(Filters.eq(&amp;quot;x&amp;quot;, 1))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Extended JSON</title>
      <link>/mongo-scala-driver/2.1/bson/extended-json/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/bson/extended-json/</guid>
      <description>

&lt;h2 id=&#34;mongodb-extended-json&#34;&gt;MongoDB Extended JSON&lt;/h2&gt;

&lt;p&gt;The Scala driver supports reading and writing BSON documents represented as&lt;br /&gt;
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/mongodb-extended-json/&#34;&gt;MongoDB Extended JSON&lt;/a&gt;.  Both variants are supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strict Mode: representations of BSON types that conform to the &lt;a href=&#34;http://www.json.org/&#34;&gt;JSON RFC&lt;/a&gt;. This is the
format that &lt;a href=&#34;http://docs.mongodb.org/manual/reference/program/mongoexport/&#34;&gt;mongoexport&lt;/a&gt; produces and
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/program/mongoimport/&#34;&gt;mongoimport&lt;/a&gt; consumes.&lt;/li&gt;
&lt;li&gt;Shell Mode: a superset of JSON that the
&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/getting-started-with-the-mongo-shell/&#34;&gt;MongoDB shell&lt;/a&gt; can parse.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, the &lt;code&gt;Document&lt;/code&gt; provides two sets of convenience methods for this purpose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Document.toJson(): a set of overloaded methods that convert a &lt;code&gt;Document&lt;/code&gt; instance to a JSON string&lt;/li&gt;
&lt;li&gt;Document(json): a set of overloaded static factory methods that convert a JSON string to a &lt;code&gt;Document&lt;/code&gt; instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;writing-json&#34;&gt;Writing JSON&lt;/h2&gt;

&lt;p&gt;Consider the task of implementing a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/program/mongoexport/&#34;&gt;mongoexport&lt;/a&gt;-like tool using the
Scala driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val fileName =    // initialize to the path of the file to write to
val collection =  // initialize the collection from which you want to query

val writer: PrintWriter = new PrintWriter(fileName)
collection.find().subscribe(
      (doc: Document) =&amp;gt; output.write(s&amp;quot;${doc.toJson}\r\n&amp;quot;),
      (t: Throwable) =&amp;gt; // handle failure,
      () =&amp;gt; output.close())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Document.toJson()&lt;/code&gt; method constructs an instance of a &lt;code&gt;JsonWriter&lt;/code&gt; with its default settings, which will write in strict mode with no new lines or indentation.&lt;/p&gt;

&lt;p&gt;You can override this default behavior by using one of the overloads of &lt;code&gt;toJson()&lt;/code&gt;.  As an example, consider the task of writing a JSON string
that can be copied and pasted into the MongoDB shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import java.text.SimpleDateFormat

val fmt = new SimpleDateFormat(&amp;quot;dd/MM/yy&amp;quot;)
val first = fmt.parse(&amp;quot;01/01/2014&amp;quot;)
val second = fmt.parse(&amp;quot;01/01/2015&amp;quot;)
val doc = Document(&amp;quot;startDate&amp;quot; -&amp;gt; Document(&amp;quot;$gt&amp;quot; -&amp;gt; first, &amp;quot;$lt&amp;quot; -&amp;gt; second))
println(doc.toJson(new JsonWriterSettings(JsonMode.SHELL)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code snippet will print out MongoDB shell-compatible JSON, which can then be pasted into the shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ &amp;quot;startDate&amp;quot; : { &amp;quot;$gt&amp;quot; : ISODate(&amp;quot;2014-01-01T05:00:00.000Z&amp;quot;), &amp;quot;$lt&amp;quot; : ISODate(&amp;quot;2015-01-01T05:00:00.000Z&amp;quot;) } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reading-json&#34;&gt;Reading JSON&lt;/h2&gt;

&lt;p&gt;Consider the task of implementing a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/program/mongoimport/&#34;&gt;mongoimport&lt;/a&gt;-like tool using the
Java driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import scala.io.Source
val fileName =    // initialize to the path of the file to read from
val collection =  // initialize the collection from which you want to import to

try {
  for (json &amp;lt;- Source.fromFile(fileName).getLines()) {
    collection.insertOne(Document(json)).head()
  }
} catch {
  case ex: Exception =&amp;gt; println(&amp;quot;Bummer, an exception happened.&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Document(json)&lt;/code&gt; companion helper method constructs an instance of a &lt;code&gt;JsonReader&lt;/code&gt; with the given string and returns an instance of an
equivalent Document instance. &lt;code&gt;JsonReader&lt;/code&gt; automatically detects the JSON flavor in the string, so you do not need to specify it.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;In the &lt;a href=&#34;https://github.com/mongodb/mongo-scala-driver/blob/master/src/examples/scripts&#34;&gt;tools&lt;/a&gt; examples directory, there is sample code for &lt;code&gt;mongoimport&lt;/code&gt; and &lt;code&gt;mongoexport&lt;/code&gt;.
These examples are more fully featured than the above code snippets. They also provide an example of asynchronous error handling, as well
as chaining observables to enforce insertion order on import.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/mongo-scala-driver/2.1/builders/aggregation/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/builders/aggregation/</guid>
      <description>

&lt;h2 id=&#34;aggregation&#34;&gt;Aggregation&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Aggregates$
&#34;&gt;&lt;code&gt;Aggregates&lt;/code&gt;&lt;/a&gt; class provides static factory methods that build &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/
&#34;&gt;aggregation
pipeline operators&lt;/a&gt;.  Each method returns an instance of the
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/bson/documents/#bson&#34;&gt;&lt;code&gt;Bson&lt;/code&gt;&lt;/a&gt; type, which can in turn be passed to the &lt;code&gt;aggregate&lt;/code&gt; method of &lt;code&gt;MongoCollection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For brevity, you may choose to import the methods of the &lt;code&gt;Aggregates&lt;/code&gt; class statically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.model.Aggregates._
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the examples below assume this static import.&lt;/p&gt;

&lt;h3 id=&#34;match&#34;&gt;Match&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/match/
&#34;&gt;&lt;code&gt;$match&lt;/code&gt;&lt;/a&gt; pipeline stage passes all documents matching the
specified filter to the next stage.  Though the filter can be an instance of any class that implements &lt;code&gt;Bson&lt;/code&gt;, it&amp;rsquo;s convenient to
combine with use of the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Filters$
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; class.  In the example below, it&amp;rsquo;s assumed that the
&lt;code&gt;equal&lt;/code&gt; method of the &lt;code&gt;Filters&lt;/code&gt; class has been statically imported.&lt;/p&gt;

&lt;p&gt;This example creates a pipeline stage that matches all documents where the &lt;code&gt;author&lt;/code&gt; field is equal to &lt;code&gt;&amp;quot;Dave&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;`match`(equal(&amp;quot;author&amp;quot;, &amp;quot;Dave&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;As &lt;code&gt;match&lt;/code&gt; is a reserved word in scala and has to be escaped by ` (backticks), the &lt;code&gt;filter&lt;/code&gt; alias may be preferred:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;filter(equal(&amp;quot;author&amp;quot;, &amp;quot;Dave&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;project&#34;&gt;Project&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/project/
&#34;&gt;&lt;code&gt;$project&lt;/code&gt;&lt;/a&gt; pipeline stage passes the projected fields of all
documents to the next stage.  Though the projection can be an instance of any class that implements &lt;code&gt;Bson&lt;/code&gt;, it&amp;rsquo;s convenient to combine
with use of the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Projections$
&#34;&gt;&lt;code&gt;Projections&lt;/code&gt;&lt;/a&gt; class.  In the example below, it&amp;rsquo;s assumed that the
&lt;code&gt;include&lt;/code&gt;, &lt;code&gt;excludeId&lt;/code&gt;, and &lt;code&gt;fields&lt;/code&gt; methods of the &lt;code&gt;Projections&lt;/code&gt; class have been statically imported.&lt;/p&gt;

&lt;p&gt;This example creates a pipeline stage that excludes the &lt;code&gt;_id&lt;/code&gt; field but includes the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;author&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;project(fields(include(&amp;quot;title&amp;quot;, &amp;quot;author&amp;quot;), excludeId()))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;projecting-computed-fields&#34;&gt;Projecting Computed Fields&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;$project&lt;/code&gt; stage can project computed fields as well.&lt;/p&gt;

&lt;p&gt;This example simply projects the &lt;code&gt;qty&lt;/code&gt; field into a new field called &lt;code&gt;quantity&lt;/code&gt;.  In other words, it renames the field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;project(computed(&amp;quot;quantity&amp;quot;, &amp;quot;$qty&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sample&#34;&gt;Sample&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/sample/
&#34;&gt;&lt;code&gt;$sample&lt;/code&gt;&lt;/a&gt; pipeline stage randomly select N documents from its input.
This example creates a pipeline stage that randomly selects 5 documents from the collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;sample(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sort&#34;&gt;Sort&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/sort/
&#34;&gt;&lt;code&gt;$sort&lt;/code&gt;&lt;/a&gt; pipeline stage passes all documents to the next stage,
sorted by the specified sort criteria. Though the sort criteria can be an instance of any class that implements &lt;code&gt;Bson&lt;/code&gt;, it&amp;rsquo;s convenient to
combine with use of the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Sorts$
&#34;&gt;&lt;code&gt;Sorts&lt;/code&gt;&lt;/a&gt; class.  In the example below, it&amp;rsquo;s assumed that the
&lt;code&gt;descending&lt;/code&gt;, &lt;code&gt;ascending&lt;/code&gt;, and &lt;code&gt;orderBy&lt;/code&gt; methods of the &lt;code&gt;Sorts&lt;/code&gt; class have been statically imported.&lt;/p&gt;

&lt;p&gt;This example creates a pipeline stage that sorts in descending order according to the value of the &lt;code&gt;age&lt;/code&gt; field and then in ascending order
according to the value of the &lt;code&gt;posts&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;sort(orderBy(descending(&amp;quot;age&amp;quot;), ascending(&amp;quot;posts&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;skip&#34;&gt;Skip&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/skip/
&#34;&gt;&lt;code&gt;$skip&lt;/code&gt;&lt;/a&gt; pipeline stage skips over the specified number of
documents that pass into the stage and passes the remaining documents to the next stage.&lt;/p&gt;

&lt;p&gt;This example skips the first &lt;code&gt;5&lt;/code&gt; documents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;skip(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;limit&#34;&gt;Limit&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/limit/
&#34;&gt;&lt;code&gt;$limit&lt;/code&gt;&lt;/a&gt; pipeline stage limits the number of documents passed
to the next stage.&lt;/p&gt;

&lt;p&gt;This example limits the number of documents to &lt;code&gt;10&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;limit(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lookup&#34;&gt;Lookup&lt;/h3&gt;

&lt;p&gt;Starting in 3.2, MongoDB provides a new &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/lookup/
&#34;&gt;&lt;code&gt;$lookup&lt;/code&gt;&lt;/a&gt; pipeline stage
that performs a left outer join with another collection to filter in documents from the joined collection for processing.&lt;/p&gt;

&lt;p&gt;This example performs a left outer join on the &lt;code&gt;fromCollection&lt;/code&gt; collection, joining the &lt;code&gt;local&lt;/code&gt; field to the &lt;code&gt;from&lt;/code&gt; field and outputted in
the &lt;code&gt;joinedOutput&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;lookup(&amp;quot;fromCollection&amp;quot;, &amp;quot;local&amp;quot;, &amp;quot;from&amp;quot;, &amp;quot;joinedOutput&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;group&#34;&gt;Group&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/group/
&#34;&gt;&lt;code&gt;$group&lt;/code&gt;&lt;/a&gt; pipeline stage groups documents by some specified
expression and outputs to the next stage a document for each distinct grouping.  A group consists of an &lt;code&gt;_id&lt;/code&gt; which specifies the
expression on which to group, and zero or more
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/group/#accumulator-operator
&#34;&gt;accumulators&lt;/a&gt; which are evaluated for each
grouping.  To simplify the expression of accumulators, the driver includes an
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Aggregates$
&#34;&gt;&lt;code&gt;Accumulators&lt;/code&gt;&lt;/a&gt; class with static factory methods for each of the supported
accumulators. In the example below, it&amp;rsquo;s assumed that the &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;avg&lt;/code&gt; methods of the &lt;code&gt;Accumulators&lt;/code&gt; class have been statically
imported.&lt;/p&gt;

&lt;p&gt;This example groups documents by the value of the &lt;code&gt;customerId&lt;/code&gt; field, and for each group accumulates the sum and average of the values of
the &lt;code&gt;quantity&lt;/code&gt; field into the &lt;code&gt;totalQuantity&lt;/code&gt; and &lt;code&gt;averageQuantity&lt;/code&gt; fields, respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;group(&amp;quot;$customerId&amp;quot;, sum(&amp;quot;totalQuantity&amp;quot;, &amp;quot;$quantity&amp;quot;), avg(&amp;quot;averageQuantity&amp;quot;, &amp;quot;$quantity&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unwind&#34;&gt;Unwind&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/unwind/
&#34;&gt;&lt;code&gt;$unwind&lt;/code&gt;&lt;/a&gt; pipeline stage deconstructs an array field from the
input documents to output a document for each element.&lt;/p&gt;

&lt;p&gt;This example outputs, for each document, a document for each element in the &lt;code&gt;sizes&lt;/code&gt; array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;unwind(&amp;quot;$sizes&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available with MongoDB 3.2, this example also includes any documents that have missing or &lt;code&gt;null&lt;/code&gt; values for the &lt;code&gt;$sizes&lt;/code&gt; field or where
the &lt;code&gt;$sizes&lt;/code&gt; list is empty:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;unwind(&amp;quot;$sizes&amp;quot;, UnwindOptions().preserveNullAndEmptyArrays(true))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available with MongoDB 3.2, this example unwinds the &lt;code&gt;sizes&lt;/code&gt; array and also outputs the array index into the &lt;code&gt;$position&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;unwind(&amp;quot;$sizes&amp;quot;, UnwindOptions().includeArrayIndex(&amp;quot;$position&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;out&#34;&gt;Out&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/out/
&#34;&gt;&lt;code&gt;$out&lt;/code&gt;&lt;/a&gt; pipeline stage outputs all documents to the specified
collection.  It must be the last stage in any aggregate pipeline:&lt;/p&gt;

&lt;p&gt;This example writes the pipeline to the &lt;code&gt;authors&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;out(&amp;quot;authors&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-pipeline&#34;&gt;Creating a Pipeline&lt;/h3&gt;

&lt;p&gt;The above pipeline operators are typically combined into a list and passed to the &lt;code&gt;aggregate&lt;/code&gt; method of a &lt;code&gt;MongoCollection&lt;/code&gt;.  For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;collection.aggregate(List(filter(equal(&amp;quot;author&amp;quot;, &amp;quot;Dave&amp;quot;)),
                                 group(&amp;quot;$customerId&amp;quot;, sum(&amp;quot;totalQuantity&amp;quot;, &amp;quot;$quantity&amp;quot;), 
                                                      avg(&amp;quot;averageQuantity&amp;quot;, &amp;quot;$quantity&amp;quot;)),
                                 out(&amp;quot;authors&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>/mongo-scala-driver/2.1/builders/filters/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/builders/filters/</guid>
      <description>

&lt;h2 id=&#34;filters&#34;&gt;Filters&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Filters$
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; class provides static factory methods for all the MongoDB query
operators.  Each method returns an instance of the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/bson/documents/#bson&#34;&gt;&lt;code&gt;Bson&lt;/code&gt;&lt;/a&gt; type, which can in turn be passed to
any method that expects a query filter.&lt;/p&gt;

&lt;p&gt;For brevity, you may choose to import the methods of the &lt;code&gt;Filters&lt;/code&gt; class statically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.model.Filters._
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the examples below assume this static import.&lt;/p&gt;

&lt;h3 id=&#34;comparison&#34;&gt;Comparison&lt;/h3&gt;

&lt;p&gt;The comparison operator methods include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eq&lt;/code&gt;: Matches values that are equal to a specified value. Aliased to &lt;code&gt;equal&lt;/code&gt; as &lt;code&gt;eq&lt;/code&gt; is a reserved word.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gt&lt;/code&gt;: Matches values that are greater than a specified value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gte&lt;/code&gt;: Matches values that are greater than or equal to a specified value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lt&lt;/code&gt;: Matches values that are less than a specified value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lte&lt;/code&gt;: Matches values that are less than or equal to a specified value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ne&lt;/code&gt;: Matches all values that are not equal to a specified value. Aliased to &lt;code&gt;notEqual&lt;/code&gt; as &lt;code&gt;neq&lt;/code&gt; is a reserved word.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;: Matches any of the values specified in an array.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nin&lt;/code&gt;: Matches none of the values specified in an array.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;This example creates a filter that selects all documents where the value of the &lt;code&gt;qty&lt;/code&gt; field equals &lt;code&gt;20&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;`eq`(&amp;quot;qty&amp;quot;, 20)
equal(&amp;quot;qty&amp;quot;, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which will render as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{  
   &amp;quot;qty&amp;quot; : 20
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example creates a filter that selects all documents where the value of the &lt;code&gt;qty&lt;/code&gt; field is either &lt;code&gt;5&lt;/code&gt; or &lt;code&gt;20&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;in(&amp;quot;qty&amp;quot;, 5, 15)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logical&#34;&gt;Logical&lt;/h3&gt;

&lt;p&gt;The logical operator methods include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;: Joins filters with a logical AND and selects all documents that match the conditions of both filters.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;: Joins filters with a logical OR and selects all documents that match the conditions of either filters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not&lt;/code&gt;: Inverts the effect of a query expression and selects documents that do not match the filter.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nor&lt;/code&gt;: Joins filters with a logical NOR and selects all documents that fail to match both filters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;examples-1&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;This example creates a filter that selects all documents where ther value of the &lt;code&gt;qty&lt;/code&gt; field is greater than &lt;code&gt;20&lt;/code&gt; and the value of the
&lt;code&gt;user&lt;/code&gt; field equals &lt;code&gt;&amp;quot;jdoe&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;and(gt(&amp;quot;qty&amp;quot;, 20), equal(&amp;quot;user&amp;quot;, &amp;quot;jdoe&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;and&lt;/code&gt; method generates a &lt;code&gt;$and&lt;/code&gt; operator only if necessary, as the query language implicity ands together all the elements in a
filter. So the above example will render as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ 
   &amp;quot;qty&amp;quot; : { &amp;quot;$gt&amp;quot; : 20 },
   &amp;quot;user&amp;quot; : &amp;quot;jdoe&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example creates a filter that selects all documents where the &lt;code&gt;price&lt;/code&gt; field value equals &lt;code&gt;0.99&lt;/code&gt; or &lt;code&gt;1.99&lt;/code&gt;; and the &lt;code&gt;sale&lt;/code&gt; field value
is equal to &lt;code&gt;true&lt;/code&gt; or the &lt;code&gt;qty&lt;/code&gt; field value is less than &lt;code&gt;20&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;and(or(equal(&amp;quot;price&amp;quot;, 0.99), equal(&amp;quot;price&amp;quot;, 1.99)
    or(equal(&amp;quot;sale&amp;quot;, true), lt(&amp;quot;qty&amp;quot;, 20)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query cannot be constructed using an implicit and operation, because it uses the &lt;code&gt;$or&lt;/code&gt; operator more than once.  So it will render as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
 &amp;quot;$and&amp;quot; : 
    [
      { &amp;quot;$or&amp;quot; : [ { &amp;quot;price&amp;quot; : 0.99 }, { &amp;quot;price&amp;quot; : 1.99 } ] },
      { &amp;quot;$or&amp;quot; : [ { &amp;quot;sale&amp;quot; : true }, { &amp;quot;qty&amp;quot; : { &amp;quot;$lt&amp;quot; : 20 } } ] }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;

&lt;p&gt;The array operator methods include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt;: Matches arrays that contain all elements specified in the query&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemMatch&lt;/code&gt;: Selects documents if element in the array field matches all the specified $elemMatch conditions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;: Selects documents if the array field is a specified size&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;examples-2&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;This example selects documents with a &lt;code&gt;tags&lt;/code&gt; array containing both &lt;code&gt;&amp;quot;ssl&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;security&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;all(&amp;quot;tags&amp;quot;, &amp;quot;ssl&amp;quot;, &amp;quot;security&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;elements&#34;&gt;Elements&lt;/h3&gt;

&lt;p&gt;The elements operator methods include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exists&lt;/code&gt;: Selects documents that have the specified field.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: Selects documents if a field is of the specified type. Aliased to &lt;code&gt;bsonType&lt;/code&gt; as &lt;code&gt;type&lt;/code&gt; is a reserved word.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;examples-3&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;This example selects documents that have a &lt;code&gt;qty&lt;/code&gt; field and its value does not equal &lt;code&gt;5&lt;/code&gt; or &lt;code&gt;15&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;and(exists(&amp;quot;qty&amp;quot;), nin(&amp;quot;qty&amp;quot;, 5, 15))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;evaluation&#34;&gt;Evaluation&lt;/h3&gt;

&lt;p&gt;The evaluation operator methods include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mod&lt;/code&gt;: Performs a modulo operation on the value of a field and selects documents with a specified result.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt;: Selects documents where values match a specified regular expression.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;: Selects documemts matching a full-text search expression.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt;: Matches documents that satisfy a JavaScript expression.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;examples-4&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;This example assumes a collection that has a text index in the field &lt;code&gt;abstract&lt;/code&gt;.  It selects documents that have a &lt;code&gt;abstract&lt;/code&gt; field
containing the term &lt;code&gt;coffee&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;text(&amp;quot;coffee&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available with MongoDB 3.2, a version 3 text index allows case-sensitive searches. This example selects documents that have an
&lt;code&gt;abstract&lt;/code&gt; field containing the exact term &lt;code&gt;coffee&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;text(&amp;quot;coffee&amp;quot;, TextSearchOptions().caseSensitive(true))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available with MongoDB 3.2, a version 3 text index allows diacritic-sensitive searches. This example selects documents that have an
&lt;code&gt;abstract&lt;/code&gt; field containing the exact term &lt;code&gt;café&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;text(&amp;quot;café&amp;quot;, TextSearchOptions().diacriticSensitive(true))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bitwise&#34;&gt;Bitwise&lt;/h3&gt;

&lt;p&gt;The bitwise query operators, available with MongoDB 3.2 include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bitsAllSet&lt;/code&gt;: Selects documents where the all the specified bits of a field are set (i.e. 1).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bitsAllClear&lt;/code&gt;: Selects documents where the all the specified bits of a field are clear (i.e. 0).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bitsAnySet&lt;/code&gt;: Selects documents where at least one of the specified bits of a field are set (i.e. 1).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bitsAnyClear&lt;/code&gt;: Selects documents where at least one of the specified bits of a field are clear (i.e. 0)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;examples-5&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;The example selects documents that have a &lt;code&gt;bitField&lt;/code&gt; field with bits set at positions of the corresponding bitmask &lt;code&gt;50&lt;/code&gt; (i.e. &lt;code&gt;00110010&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;bitsAllSet(&amp;quot;bitField&amp;quot;, 50)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;geospatial&#34;&gt;Geospatial&lt;/h3&gt;

&lt;p&gt;The geospatial operator methods include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geoWithin&lt;/code&gt;: Selects all documents containing a field whose value is a GeoJSON geometry that falls within within a bounding GeoJSON
geometry.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geoWithinBox&lt;/code&gt;: Selects all documents containing a field with grid coordinates data that exist entirely within the specified box.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geoWithinPolygon&lt;/code&gt;: Selects all documents containing a field with grid coordinates data that exist entirely within the specified polygon.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geoWithinCenter&lt;/code&gt;: Selects all documents containing a field with grid coordinates data that exist entirely within the specified circle.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geoWithinCenterSphere&lt;/code&gt;: Selects geometries containing a field with geospatial data (GeoJSON or legacy coordinate pairs) that exist
entirely within the specified circle, using spherical geometry.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geoIntersects&lt;/code&gt;: Selects geometries that intersect with a GeoJSON geometry. The 2dsphere index supports $geoIntersects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;near&lt;/code&gt;: Returns geospatial objects in proximity to a point. Requires a geospatial index. The 2dsphere and 2d indexes support $near.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nearSphere&lt;/code&gt;: Returns geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The 2dsphere and 2d
indexes support $nearSphere.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make it easier to construct GeoJSON-based filters, the driver also include a full GeoJSON class hierarchy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala..model.geojson.package$$Point$
&#34;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt;: A representation of a GeoJSON Point.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala..model.geojson.package$$MultiPoint$
&#34;&gt;&lt;code&gt;MultiPoint&lt;/code&gt;&lt;/a&gt;: A representation of a GeoJSON MultiPoint.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala..model.geojson.package$$LineString$
&#34;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt;: A representation of a GeoJSON LineString.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala..model.geojson.package$$MultiLineString$
&#34;&gt;&lt;code&gt;MultiLineString&lt;/code&gt;&lt;/a&gt;: A representation of a GeoJSON MultiLineString.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala..model.geojson.package$$Polygon$
&#34;&gt;&lt;code&gt;Polygon&lt;/code&gt;&lt;/a&gt;: A representation of a GeoJSON Polygon.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala..model.geojson.package$$MultiPolygon$
&#34;&gt;&lt;code&gt;MultiPolygon&lt;/code&gt;&lt;/a&gt;: A representation of a GeoJSON MultiPolygon.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala..model.geojson.package$$GeometryCollection$
&#34;&gt;&lt;code&gt;GeometryCollection&lt;/code&gt;&lt;/a&gt;: A representation of a GeoJSON
GeometryCollection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;examples-6&#34;&gt;Examples&lt;/h4&gt;

&lt;p&gt;This example creates a filter that selects all documents where the &lt;code&gt;geo&lt;/code&gt; field contains a GeoJSON Geometry object that falls within the
given polygon:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;    val polygon: Polygon = Polygon(Seq(Position(0, 0), Position(4, 0),
                                       Position(4, 4), Position(0, 4),
                                       Position(0, 0)))
    geoWithin(&amp;quot;geo&amp;quot;, polygon)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, this example creates a filter that selects all documents where the &lt;code&gt;geo&lt;/code&gt; field contains a GeoJSON Geometry object that
intersects the given Point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;geoIntersects(&amp;quot;geo&amp;quot;, Point(Position(4, 0)))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Projections</title>
      <link>/mongo-scala-driver/2.1/builders/projections/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/builders/projections/</guid>
      <description>

&lt;h2 id=&#34;projections&#34;&gt;Projections&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Projections$
&#34;&gt;&lt;code&gt;Projections&lt;/code&gt;&lt;/a&gt; class provides static factory methods for all the MongoDB
projection opererators.  Each method returns an instance of the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/bson/documents/#bson&#34;&gt;&lt;code&gt;Bson&lt;/code&gt;&lt;/a&gt; type, which can in turn
be passed to any method that expects a projection.&lt;/p&gt;

&lt;p&gt;For brevity, you may choose to import the methods of the &lt;code&gt;Projections&lt;/code&gt; class statically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.model.Projections._
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the examples below assume this static import.&lt;/p&gt;

&lt;h3 id=&#34;inclusion&#34;&gt;Inclusion&lt;/h3&gt;

&lt;p&gt;By default, all fields of each document are projected.  To specify the inclusion of one or more fields (which implicitly excludes all
other fields except &lt;code&gt;_id&lt;/code&gt;), use the &lt;code&gt;include&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This example includes the &lt;code&gt;quantity&lt;/code&gt; field and (implicitly) the &lt;code&gt;_id&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;include(&amp;quot;quantity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example includes the &lt;code&gt;quantity&lt;/code&gt; and &lt;code&gt;totalAmount&lt;/code&gt; fields and (implicitly) the &lt;code&gt;_id&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;include(&amp;quot;quantity&amp;quot;, &amp;quot;totalAmount&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;exclusion&#34;&gt;Exclusion&lt;/h3&gt;

&lt;p&gt;To specify the exclusion of one or more fields (which implicitly includes all other fields), use the &lt;code&gt;exclude&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This example excludes the &lt;code&gt;quantity&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;exclude(&amp;quot;quantity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example excludes the &lt;code&gt;quantity&lt;/code&gt; and &lt;code&gt;totalAmount&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;exclude(&amp;quot;quantity&amp;quot;, &amp;quot;totalAmount&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;exclusion-of-id&#34;&gt;Exclusion of _id&lt;/h3&gt;

&lt;p&gt;To specify the exclusion of the &lt;code&gt;_id&lt;/code&gt; field, use the &lt;code&gt;excludeId&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;excludeId()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is just shorthand for:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;exclude(&amp;quot;_id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;array-element-match-with-a-supplied-filter&#34;&gt;Array Element Match with a Supplied Filter&lt;/h3&gt;

&lt;p&gt;To specify a projection that includes only the first element of an array that matches a supplied query filter (the
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/projection/elemMatch
&#34;&gt;elemMatch&lt;/a&gt; operator), use the &lt;code&gt;elemMatch&lt;/code&gt; method that takes a
field name and a filter.&lt;/p&gt;

&lt;p&gt;This example projects the first element of the &lt;code&gt;orders&lt;/code&gt; array where the &lt;code&gt;quantity&lt;/code&gt; field is greater that &lt;code&gt;3&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;elemMatch(&amp;quot;orders&amp;quot;, Filters.gt(&amp;quot;quantity&amp;quot;, 3))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;array-element-match-with-an-implicit-filter&#34;&gt;Array Element Match with an Implicit Filter&lt;/h3&gt;

&lt;p&gt;To specify a projection that includes only the first element of an array that matches the filter supplied as part of the query (the
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/projection/positional/#projection
&#34;&gt;positional $ operator&lt;/a&gt;), use the &lt;code&gt;elemMatch&lt;/code&gt; method that takes
just a field name.&lt;/p&gt;

&lt;p&gt;This example projects the first element of the &lt;code&gt;orders&lt;/code&gt; array that matches the query filter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;elemMatch(&amp;quot;orders&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;slice&#34;&gt;Slice&lt;/h3&gt;

&lt;p&gt;To project &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/projection/slice
&#34;&gt;a slice of an array&lt;/a&gt;, use one of the &lt;code&gt;slice&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;This example projects the first &lt;code&gt;7&lt;/code&gt; elements of the &lt;code&gt;tags&lt;/code&gt; array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;slice(&amp;quot;tags&amp;quot;, 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example skips the first &lt;code&gt;2&lt;/code&gt; elements of the &lt;code&gt;tags&lt;/code&gt; array and projects the next &lt;code&gt;5&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;slice(&amp;quot;tags&amp;quot;, 2, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;text-score&#34;&gt;Text Score&lt;/h3&gt;

&lt;p&gt;To specify a projection of &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text/#return-the-text-search-score
&#34;&gt;the score of a &lt;code&gt;$text&lt;/code&gt; query&lt;/a&gt;,
use the &lt;code&gt;metaTextScore&lt;/code&gt; method to specify the name of the projected field.&lt;/p&gt;

&lt;p&gt;This example projects the text score as the value of the &lt;code&gt;score&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;metaTextScore(&amp;quot;score&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;combining-projections&#34;&gt;Combining Projections&lt;/h3&gt;

&lt;p&gt;To combine multiple projections, use the &lt;code&gt;fields&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This example includes the &lt;code&gt;quantity&lt;/code&gt; and &lt;code&gt;totalAmount&lt;/code&gt; fields and excludes the &lt;code&gt;_id&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;fields(include(&amp;quot;quantity&amp;quot;, &amp;quot;totalAmount&amp;quot;), excludeId()) 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sort Criteria  </title>
      <link>/mongo-scala-driver/2.1/builders/sorts/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/builders/sorts/</guid>
      <description>

&lt;h2 id=&#34;sorts&#34;&gt;Sorts&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Sorts$
&#34;&gt;&lt;code&gt;Sorts&lt;/code&gt;&lt;/a&gt; class provides static factory methods for all the MongoDB sort criteria
operators.  Each method returns an instance of the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/bson/documents/#bson&#34;&gt;&lt;code&gt;Bson&lt;/code&gt;&lt;/a&gt; type, which can in turn be passed to
any method that expects sort criteria.&lt;/p&gt;

&lt;p&gt;For brevity, you may choose to import the methods of the &lt;code&gt;Sorts&lt;/code&gt; class statically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.model.Sorts._
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the examples below assume this static import.&lt;/p&gt;

&lt;h3 id=&#34;ascending&#34;&gt;Ascending&lt;/h3&gt;

&lt;p&gt;To specify an ascending sort, use one of the &lt;code&gt;ascending&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;This example specifies an ascending sort on the &lt;code&gt;quantity&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;ascending(&amp;quot;quantity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example specifies an ascending sort on the &lt;code&gt;quantity&lt;/code&gt; field, followed by an ascending sort on the &lt;code&gt;totalAmount&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;ascending(&amp;quot;quantity&amp;quot;, &amp;quot;totalAmount&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;descending&#34;&gt;Descending&lt;/h3&gt;

&lt;p&gt;To specify a descending sort, use one of the &lt;code&gt;descending&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;This example specifies a descending sort on the &lt;code&gt;quantity&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;descending(&amp;quot;quantity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example specifies a descending sort on the &lt;code&gt;quantity&lt;/code&gt; field, followed by a descending sort on the &lt;code&gt;totalAmount&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;descending(&amp;quot;quantity&amp;quot;, &amp;quot;totalAmount&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;text-score&#34;&gt;Text Score&lt;/h3&gt;

&lt;p&gt;To specify a sort by &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text/#sort-by-text-search-score
&#34;&gt;the score of a &lt;code&gt;$text&lt;/code&gt; query&lt;/a&gt;, use the
&lt;code&gt;metaTextScore&lt;/code&gt; method to specify the name of the projected field.&lt;/p&gt;

&lt;p&gt;This example specifies a sort on the score of a &lt;code&gt;$text&lt;/code&gt; query that will be projected into the &lt;code&gt;scoreValue&lt;/code&gt; field in a projection on the
same query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;metaTextScore(&amp;quot;scoreValue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;combining-sort-criteria&#34;&gt;Combining sort criteria&lt;/h3&gt;

&lt;p&gt;To specify the combination of multiple sort criteria, use the &lt;code&gt;orderBy&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This example specifies an ascending sort on the &lt;code&gt;quantity&lt;/code&gt; field, followed by an ascending sort on the &lt;code&gt;totalAmount&lt;/code&gt; field, followed by a
descending sort on the &lt;code&gt;orderDate&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;orderBy(ascending(&amp;quot;quantity&amp;quot;, &amp;quot;totalAmount&amp;quot;), descending(&amp;quot;orderDate&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Updates</title>
      <link>/mongo-scala-driver/2.1/builders/updates/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/builders/updates/</guid>
      <description>

&lt;h2 id=&#34;updates&#34;&gt;Updates&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.model.Updates$
&#34;&gt;&lt;code&gt;Updates&lt;/code&gt;&lt;/a&gt; class provides static factory methods for all the MongoDB update
operators.  Each method returns an instance of the &lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/bson/documents/#bson&#34;&gt;&lt;code&gt;Bson&lt;/code&gt;&lt;/a&gt; type, which can in turn be passed to
any method that expects an update.&lt;/p&gt;

&lt;p&gt;For brevity, you may choose to import the methods of the &lt;code&gt;Updates&lt;/code&gt; class statically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.model.Updates._
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the examples below assume this static import.&lt;/p&gt;

&lt;h3 id=&#34;field-updates&#34;&gt;Field Updates&lt;/h3&gt;

&lt;p&gt;This section describes update operators that apply to the value of an entire field.&lt;/p&gt;

&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/set/
&#34;&gt;&lt;code&gt;$set&lt;/code&gt;&lt;/a&gt; update operator sets the value of a field to to the specified value.&lt;/p&gt;

&lt;p&gt;This example sets the value of the &lt;code&gt;quantity&lt;/code&gt; field to &lt;code&gt;11&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;set(&amp;quot;quantity&amp;quot;, 11)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;unset&#34;&gt;Unset&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/unset/
&#34;&gt;&lt;code&gt;$unset&lt;/code&gt;&lt;/a&gt; update operator deletes the field with the given name.&lt;/p&gt;

&lt;p&gt;This example deletes the &lt;code&gt;quantity&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;unset(&amp;quot;quantity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;set-on-insert&#34;&gt;Set On Insert&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/setOnInsert/
&#34;&gt;&lt;code&gt;$setOnInsert&lt;/code&gt;&lt;/a&gt; update operator sets the value of a field to the given
value, but only if the update is an
&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/modify-documents/#specify-upsert-true-for-the-update-specific-fields-operation
&#34;&gt;upsert&lt;/a&gt; that results in an
insert of a document.&lt;/p&gt;

&lt;p&gt;This example sets the value of the &lt;code&gt;defaultQuantity&lt;/code&gt; field to &lt;code&gt;10&lt;/code&gt; if an upsert resulted in the insert of a document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;setOnInsert(&amp;quot;defaultQuantity&amp;quot;, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;increment&#34;&gt;Increment&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/inc/
&#34;&gt;&lt;code&gt;$inc&lt;/code&gt;&lt;/a&gt; update operator increments the value of a numeric field by a specified
value.&lt;/p&gt;

&lt;p&gt;This example increments the value of the &lt;code&gt;quantity&lt;/code&gt; field by &lt;code&gt;5&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;inc(&amp;quot;quantity&amp;quot;, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;multiply&#34;&gt;Multiply&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/mul/
&#34;&gt;&lt;code&gt;$mul&lt;/code&gt;&lt;/a&gt; update operator multiplies the value of a numeric field by a specified value.&lt;/p&gt;

&lt;p&gt;This example multiplies the value of the &lt;code&gt;price&lt;/code&gt; field by &lt;code&gt;1.2&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;mul(&amp;quot;price&amp;quot;, 1.2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;rename&#34;&gt;Rename&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/rename/
&#34;&gt;&lt;code&gt;$rename&lt;/code&gt;&lt;/a&gt; update operator renames a field.&lt;/p&gt;

&lt;p&gt;This example renames the &lt;code&gt;qty&lt;/code&gt; field to &lt;code&gt;quantity&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;rename(&amp;quot;qty&amp;quot;, &amp;quot;quantity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;min&#34;&gt;Min&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/min/
&#34;&gt;&lt;code&gt;$min&lt;/code&gt;&lt;/a&gt; update operator updates the value of the field to a specified value &lt;em&gt;if&lt;/em&gt; the
specified value is less than the current value of the field .&lt;/p&gt;

&lt;p&gt;This example sets the value of the &lt;code&gt;lowScore&lt;/code&gt; field to the minimum of its current value and 150:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;min(&amp;quot;lowScore&amp;quot;, 150)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;max&#34;&gt;Max&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/max/
&#34;&gt;&lt;code&gt;$max&lt;/code&gt;&lt;/a&gt; update operator updates the value of the field to a specified value &lt;em&gt;if&lt;/em&gt;
the specified value is greater than the current value of the field .&lt;/p&gt;

&lt;p&gt;This example sets the value of the &lt;code&gt;highScore&lt;/code&gt; field to the maximum of its current value and 900:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;max(&amp;quot;highScore&amp;quot;, 900)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;current-date&#34;&gt;Current Date&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/currentDate/
&#34;&gt;&lt;code&gt;$currentDate&lt;/code&gt;&lt;/a&gt; update operator sets the value of the field with the
specified name to the current date, either as a BSON &lt;a href=&#34;http://docs.mongodb.org/manual/reference/bson-types/#document-bson-type-date
&#34;&gt;date&lt;/a&gt; or as a BSON
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/bson-types/#document-bson-type-timestamp
&#34;&gt;timestamp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This example sets the value of the &lt;code&gt;lastModified&lt;/code&gt; field to the current date as a BSON date type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;currentDate(&amp;quot;lastModified&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example sets the value of the &lt;code&gt;lastModified&lt;/code&gt; field to the current date as a BSON timestamp type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;currentTimestamp(&amp;quot;lastModified&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;bit&#34;&gt;Bit&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/bit/
&#34;&gt;&lt;code&gt;$bit&lt;/code&gt;&lt;/a&gt; update operator performs a bitwise update of the integral value of a field.&lt;/p&gt;

&lt;p&gt;This example performs a bitwise AND between the number &lt;code&gt;10&lt;/code&gt; and the integral value of the &lt;code&gt;mask&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;bitwiseAnd(&amp;quot;mask&amp;quot;, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example performs a bitwise OR between the number &lt;code&gt;10&lt;/code&gt; and the integral value of the &lt;code&gt;mask&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;bitwiseOr(&amp;quot;mask&amp;quot;, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example performs a bitwise XOR between the number &lt;code&gt;10&lt;/code&gt; and the integral value of the &lt;code&gt;mask&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;bitwiseXor(&amp;quot;mask&amp;quot;, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;array-updates&#34;&gt;Array Updates&lt;/h3&gt;

&lt;p&gt;This section describes update operators that apply to the contents of the array value of a field.&lt;/p&gt;

&lt;h4 id=&#34;add-to-set&#34;&gt;Add to Set&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/addToSet/
&#34;&gt;&lt;code&gt;$addToSet&lt;/code&gt;&lt;/a&gt; update operator adds a value to an array unless the value is
already present, in which case $addToSet does nothing to that array.&lt;/p&gt;

&lt;p&gt;This example adds the value &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; to the array value of the `letters&amp;rsquo; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addToSet(&amp;quot;letters&amp;quot;, &amp;quot;a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example adds each of the values &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;b&amp;quot;&lt;/code&gt;, and &lt;code&gt;&amp;quot;c&amp;quot;&lt;/code&gt; to the array value of the `letters&amp;rsquo; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addEachToSet(&amp;quot;letters&amp;quot;, Arrays.asList(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pop&#34;&gt;Pop&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/pop/
&#34;&gt;&lt;code&gt;$pop&lt;/code&gt;&lt;/a&gt; update operator removes the first or last element of an array.&lt;/p&gt;

&lt;p&gt;This example pops the first element off of the array value of the &lt;code&gt;scores&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;popFirst(&amp;quot;scores&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example pops the last element off of the array value of the &lt;code&gt;scores&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;popLast(&amp;quot;scores&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pull-all&#34;&gt;Pull All&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/pullAll/
&#34;&gt;&lt;code&gt;$pullAll&lt;/code&gt;&lt;/a&gt; update operator removes all instances of the specified values from
an existing array.&lt;/p&gt;

&lt;p&gt;This example removes the scores &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; from the &lt;code&gt;scores&lt;/code&gt; array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;pullAll(&amp;quot;scores&amp;quot;, Arrays.asList(0, 5))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pull&#34;&gt;Pull&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/pull/
&#34;&gt;&lt;code&gt;$pull&lt;/code&gt;&lt;/a&gt; update operator removes from an existing array all instances of a value
or values that match a specified query.&lt;/p&gt;

&lt;p&gt;This example removes the value &lt;code&gt;0&lt;/code&gt; from the &lt;code&gt;scores&lt;/code&gt; array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;pull(&amp;quot;scores&amp;quot;, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example removes all elements from the &lt;code&gt;votes&lt;/code&gt; array that are greater than or equal to &lt;code&gt;6&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;pullByFilter(Filters.gte(&amp;quot;votes&amp;quot;, 6))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;push&#34;&gt;Push&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/push/
&#34;&gt;&lt;code&gt;$push&lt;/code&gt;&lt;/a&gt; update operator appends a specified value to an array.&lt;/p&gt;

&lt;p&gt;This examples pushes the value &lt;code&gt;89&lt;/code&gt; to the &lt;code&gt;scores&lt;/code&gt; array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;push(&amp;quot;scores&amp;quot;, 89)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This examples pushes each of the values &lt;code&gt;89&lt;/code&gt;, &lt;code&gt;90&lt;/code&gt;, and &lt;code&gt;92&lt;/code&gt; to the &lt;code&gt;scores&lt;/code&gt; array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;pushEach(&amp;quot;scores&amp;quot;, 89, 90, 92)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example pushes each of the values &lt;code&gt;89&lt;/code&gt;, &lt;code&gt;90&lt;/code&gt;, and &lt;code&gt;92&lt;/code&gt; to the start of the &lt;code&gt;scores&lt;/code&gt; array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;pushEach(&amp;quot;scores&amp;quot;, new PushOptions().position(0), 89, 90, 92)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example pushes each of the values &lt;code&gt;89&lt;/code&gt;, &lt;code&gt;90&lt;/code&gt;, and &lt;code&gt;92&lt;/code&gt; to the &lt;code&gt;scores&lt;/code&gt; array, sorts the array in descending order, and removes all
but the first 5 elements of the array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;pushEach(&amp;quot;scores&amp;quot;,  new PushOptions().sort(-1).slice(5), 89, 90, 92)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example pushes each of the documents &lt;code&gt;{ wk: 5, score: 8 }&lt;/code&gt;, &lt;code&gt;{ wk: 6, score: 7 }&lt;/code&gt;, and &lt;code&gt;{ wk: 7, score: 6 }&lt;/code&gt; to the &lt;code&gt;quizzes&lt;/code&gt; array,
sorts the array in descending order by &lt;code&gt;score&lt;/code&gt;, and removes all but the last 3 elements of the array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;pushEach(&amp;quot;quizzes&amp;quot;, new PushOptions().sortDocument(Sorts.descending(&amp;quot;score&amp;quot;)).slice(-3),
                 Document(&amp;quot;week&amp;quot; -&amp;gt; 5, &amp;quot;score&amp;quot; -&amp;gt; 8),
                 Document(&amp;quot;week&amp;quot; -&amp;gt; 6, &amp;quot;score&amp;quot; -&amp;gt; 7),
                 Document(&amp;quot;week&amp;quot; -&amp;gt; 7, &amp;quot;score&amp;quot; -&amp;gt; 6))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;combining-multiple-update-operators&#34;&gt;Combining Multiple Update Operators&lt;/h3&gt;

&lt;p&gt;Often, an application will need to atomically update multiple fields of a single document by combine two or more of the update operators
described above.&lt;/p&gt;

&lt;p&gt;This example sets the value of the &lt;code&gt;quantity&lt;/code&gt; field to 11, the value of the &lt;code&gt;total&lt;/code&gt; field to &lt;code&gt;30.40&lt;/code&gt;, and pushes each of the values
&lt;code&gt;4.99&lt;/code&gt;, &lt;code&gt;5.99&lt;/code&gt;, and &lt;code&gt;10.99&lt;/code&gt; to the array value of the &lt;code&gt;prices&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;combine(set(&amp;quot;quantity&amp;quot;, 11),
        set(&amp;quot;total&amp;quot;, 30.40),
        pushEach(&amp;quot;prices&amp;quot;, 4.99, 5.99, 10.99))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Authenticating</title>
      <link>/mongo-scala-driver/2.1/reference/connecting/authenticating/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/2.1/reference/connecting/authenticating/</guid>
      <description>

&lt;h1 id=&#34;authentication&#34;&gt;Authentication&lt;/h1&gt;

&lt;p&gt;The Scala driver supports all MongoDB &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/&#34;&gt;authentication mechanisms&lt;/a&gt;, including those
only available in the MongoDB &lt;a href=&#34;http://docs.mongodb.org/manual/administration/install-enterprise/&#34;&gt;Enterprise Edition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An authentication credential is represented as an instance of the
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.MongoCredential$
&#34;&gt;&lt;code&gt;MongoCredential&lt;/code&gt;&lt;/a&gt; class, which includes static factory methods for
each of the supported authentication mechanisms.  A list of these instances must be passed to the driver via a
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.MongoClient$
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; static factory method that takes a
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.MongoClientSettings$
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; parameter.  Alternatively, a single
&lt;code&gt;MongoCredential&lt;/code&gt; can be created implicity via a
&lt;a href=&#34;/mongo-scala-driver/2.1/mongo-scala-driver/2.1/scaladoc/index.html#org.mongodb.scala.ConnectionString$
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; and passed to a &lt;code&gt;MongoClient&lt;/code&gt; static factory method that
takes a &lt;code&gt;ConnectionString&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Given the flexibility of role-based access control in MongoDB, it is usually sufficient to authenticate with a single user, but, for
completeness, the driver accepts a list of credentials.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;default-authentication-mechanism&#34;&gt;Default authentication mechanism&lt;/h2&gt;

&lt;p&gt;MongoDB 3.0 changed the default authentication mechanism from
&lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#mongodb-cr-authentication&#34;&gt;MONGODB-CR&lt;/a&gt; to
&lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#scram-sha-1-authentication&#34;&gt;SCRAM-SHA-1&lt;/a&gt;.  To create a credential that will
authenticate properly regardless of server version, create a credential using the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.mongodb.MongoCredential._

// ...

val user: String = &amp;quot;userName&amp;quot;                       // the user name
val database: String = &amp;quot;databaseName&amp;quot;               // the name of the database in which the user is defined
val password: Array[Char] = &amp;quot;password&amp;quot;.toCharArray  // the password as a character array
// ...
val credential: MongoCredential = createCredential(user, database, password)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val uri: String = &amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the recommended approach as it will make upgrading from MongoDB 2.6 to MongoDB 3.0 seamless, even after &lt;a href=&#34;http://docs.mongodb.org/manual/release-notes/3.0-scram/#upgrade-mongodb-cr-to-scram&#34;&gt;upgrading the
authentication schema&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;scram-sha-1&#34;&gt;SCRAM-SHA-1&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb .org/manual/core/authentication/#scram-sha-1-authentication&#34;&gt;SCRAM-SHA-1&lt;/a&gt;
use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val credential: MongoCredential = createScramSha1Credential(user, database, password)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val uri: String = &amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=SCRAM-SHA-1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mongodb-cr&#34;&gt;MONGODB-CR&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#mongodb-cr-authentication&#34;&gt;MONGODB-CR&lt;/a&gt;
use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val credential: MongoCredential = createMongoCRCredential(user, database, password)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val uri: String = &amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=MONGODB-CR&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is not recommended as a credential created in this way will fail to authenticate after an authentication schema upgrade
from MONGODB-CR to SCRAM-SHA-1.&lt;/p&gt;

&lt;h2 id=&#34;x-509&#34;&gt;x.509&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#x-509-certificate-authentication&#34;&gt;x.509&lt;/a&gt; mechanism authenticates a user
whose name is derived from the distinguished subject name of the X.509 certificate presented by the driver during SSL negotiation. This
authentication method requires the use of SSL connections with certificate validation and is available in MongoDB 2.6 and newer. To
create a credential of this type use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val user: String = &amp;quot;...&amp;quot;     // The x.509 certificate derived user name, e.g. &amp;quot;CN=user,OU=OrgUnit,O=myOrg,...&amp;quot;
val credential: MongoCredential = createMongoX509Credential(user)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val uri: String = &amp;quot;mongodb://subjectName@host1/?authMechanism=MONGODB-X509&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the MongoDB server
&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/configure-x509-client-authentication/#add-x-509-certificate-subject-as-a-user&#34;&gt;x.509 tutorial&lt;/a&gt; for
more information about determining the subject name from the certificate.&lt;/p&gt;

&lt;h2 id=&#34;kerberos-gssapi&#34;&gt;Kerberos (GSSAPI)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Kerberos service.  To
create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#kerberos-authentication&#34;&gt;Kerberos (GSSAPI)&lt;/a&gt; use the
following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val user: String = &amp;quot;...&amp;quot;   // The Kerberos user name, including the realm, e.g. &amp;quot;user1@MYREALM.ME&amp;quot;
// ...
val credential: MongoCredential = createGSSAPICredential(user)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val uri: String = &amp;quot;mongodb://username%40REALM.com@host1/?authMechanism=GSSAPI&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;GSSAPI&lt;/code&gt; authentication mechanism instead of &lt;code&gt;Kerberos&lt;/code&gt; because technically the driver is authenticating via the
&lt;a href=&#34;https://tools.ietf.org/html/rfc4752&#34;&gt;GSSAPI&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To successfully authenticate via Kerberos, the application typically must specify several system properties so that the underlying GSSAPI
Java libraries can acquire a Kerberos ticket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java.security.krb5.realm=MYREALM.ME
java.security.krb5.kdc=mykdc.myrealm.me
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;GSSAPI&lt;/code&gt; authentication mechanism is supported only in the following environments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux: Java 6 and above&lt;/li&gt;
&lt;li&gt;Windows: Java 7 and above with &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa380493&#34;&gt;SSPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OS X: Java 7 and above&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;ldap-plain&#34;&gt;LDAP (PLAIN)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Lightweight Directory
Access Protocol (LDAP) service.  To create a credential of type &lt;a href=&#34;http://docs.mongodb
.org/manual/core/authentication/#ldap-proxy-authority-authentication&#34;&gt;LDAP&lt;/a&gt; use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val user: String = &amp;quot;...&amp;quot;                        // The LDAP user name
val password: Array[Char] = &amp;quot;...&amp;quot;.toCharArray   // The LDAP password

// ...
val credential: MongoCredential = createPlainCredential(user, &amp;quot;$external&amp;quot;, password)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val uri: String = &amp;quot;mongodb://user1@host1/?authSource=$external&amp;amp;authMechanism=PLAIN&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;plain&lt;/code&gt; authentication mechanism instead of &lt;code&gt;LDAP&lt;/code&gt; because technically the driver is authenticating via the
&lt;a href=&#34;https://www.ietf.org/rfc/rfc4616.txt&#34;&gt;PLAIN&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>